// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_gc_common.proto

package state

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Team is either blue or yellow
type Team int32

const (
	// team not set
	Team_UNKNOWN Team = 0
	// yellow team
	Team_YELLOW Team = 1
	// blue team
	Team_BLUE Team = 2
)

var Team_name = map[int32]string{
	0: "UNKNOWN",
	1: "YELLOW",
	2: "BLUE",
}

var Team_value = map[string]int32{
	"UNKNOWN": 0,
	"YELLOW":  1,
	"BLUE":    2,
}

func (x Team) Enum() *Team {
	p := new(Team)
	*p = x
	return p
}

func (x Team) String() string {
	return proto.EnumName(Team_name, int32(x))
}

func (x *Team) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Team_value, data, "Team")
	if err != nil {
		return err
	}
	*x = Team(value)
	return nil
}

func (Team) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1df1d8f3f755967a, []int{0}
}

// RobotId is the combination of a team and a robot id
type RobotId struct {
	// the robot number
	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// the team that the robot belongs to
	Team                 *Team    `protobuf:"varint,2,opt,name=team,enum=Team" json:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotId) Reset()         { *m = RobotId{} }
func (m *RobotId) String() string { return proto.CompactTextString(m) }
func (*RobotId) ProtoMessage()    {}
func (*RobotId) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df1d8f3f755967a, []int{0}
}

func (m *RobotId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotId.Unmarshal(m, b)
}
func (m *RobotId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotId.Marshal(b, m, deterministic)
}
func (m *RobotId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotId.Merge(m, src)
}
func (m *RobotId) XXX_Size() int {
	return xxx_messageInfo_RobotId.Size(m)
}
func (m *RobotId) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotId.DiscardUnknown(m)
}

var xxx_messageInfo_RobotId proto.InternalMessageInfo

func (m *RobotId) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *RobotId) GetTeam() Team {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Team_UNKNOWN
}

func init() {
	proto.RegisterEnum("Team", Team_name, Team_value)
	proto.RegisterType((*RobotId)(nil), "RobotId")
}

func init() {
	proto.RegisterFile("ssl_gc_common.proto", fileDescriptor_1df1d8f3f755967a)
}

var fileDescriptor_1df1d8f3f755967a = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x1c, 0xcd, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0x80, 0x71, 0x13, 0xaa, 0x93, 0x27, 0x8e, 0x12, 0x2f, 0xf3, 0x36, 0x3c, 0x4d, 0xa1, 0x0d,
	0x88, 0x57, 0x11, 0x26, 0x3b, 0x88, 0xa1, 0x83, 0xce, 0x31, 0xf4, 0x32, 0xb2, 0x34, 0xd4, 0x40,
	0x92, 0x17, 0x92, 0xb7, 0xff, 0x5f, 0xea, 0xf1, 0xfb, 0x2e, 0x3f, 0xb8, 0x2b, 0xc5, 0x1f, 0x47,
	0x73, 0x34, 0x18, 0x02, 0xc6, 0x36, 0x65, 0x24, 0x7c, 0x78, 0x81, 0x59, 0x8f, 0x27, 0xa4, 0x8f,
	0x41, 0xcc, 0x81, 0xbb, 0x61, 0xc1, 0x96, 0x6c, 0x75, 0xdb, 0x73, 0x37, 0x88, 0x7b, 0xa8, 0xc8,
	0xea, 0xb0, 0xe0, 0x4b, 0xb6, 0x9a, 0x3f, 0x5f, 0xb6, 0x5f, 0x56, 0x87, 0xfe, 0x7f, 0x3d, 0x3d,
	0x42, 0x35, 0x95, 0xb8, 0x81, 0xd9, 0xbe, 0xfb, 0xec, 0xb6, 0x87, 0xae, 0xbe, 0x10, 0x00, 0x57,
	0xdf, 0x1b, 0xa5, 0xb6, 0x87, 0x9a, 0x89, 0x6b, 0xa8, 0xd6, 0x6a, 0xbf, 0xa9, 0xf9, 0xfa, 0xed,
	0xe7, 0x75, 0x74, 0xf4, 0x7b, 0x3e, 0xb5, 0x06, 0x83, 0x9c, 0xac, 0xf7, 0x73, 0x6a, 0x76, 0x3b,
	0x25, 0x4b, 0xf1, 0xcd, 0xa8, 0x83, 0x6d, 0x0c, 0x46, 0xca, 0xe8, 0xbd, 0xcd, 0xd2, 0x45, 0xb2,
	0x39, 0x6a, 0x2f, 0x75, 0x4a, 0xb2, 0x90, 0x26, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x67, 0xd9,
	0xef, 0x8c, 0xb7, 0x00, 0x00, 0x00,
}
