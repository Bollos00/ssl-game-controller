syntax = "proto2";

option go_package = "github.com/RoboCup-SSL/ssl-game-controller/internal/app/rcon";

import "github.com/RoboCup-SSL/ssl-game-controller/proto/ssl_game_event.proto";
import "github.com/RoboCup-SSL/ssl-game-controller/proto/ssl_game_controller_common.proto";

// AutoRefRegistration is the first message that a client must send to the controller to identify itself
message AutoRefRegistration {
    // identifier is a unique name of the client
    required string identifier = 1;
    // signature can optionally be specified to enable secure communication
    optional Signature signature = 2;
}

// AutoRefToController is the wrapper message for all subsequent messages from the autoRef to the controller
message AutoRefToController {
    // reserve fields for removed fields
    reserved 3, 4;
    // signature can optionally be specified to enable secure communication
    optional Signature signature = 1;
    // game_event is an optional event that the autoRef detected during the game
    optional GameEvent game_event = 2;

    // metadata on the current game state
    optional GameStateMetadata game_state_metadata = 5;
}

message GameStateMetadata {
    // if current state is prepare_kickoff, prepare_penalty, stop or ball_placement:
    // true: all conditions are met to continue from the current state
    // false: at least one condition not met yet
    // not present: not supported by the autoRef
    // else:
    // undefined
    optional bool ready_to_continue = 1;

    // if current state is stop:
    // true: ball placement not required, can directly continue
    // false: need to initiate ball placement
    // if current state is ball placement:
    // true: ball placement done, all conditions met
    // false: ball not yet placed successfully
    optional bool ball_placed = 2;

    // number of yellow robots currently visible on the field
    optional uint32 number_of_robots_yellow = 3;

    // number of blue robots currently visible on the field
    optional uint32 number_of_robots_blue = 4;
}

// ControllerToAutoRef is the wrapper message for all messages from controller to autoRef
message ControllerToAutoRef {
    oneof msg {
        // a reply from the controller
        ControllerReply controller_reply = 1;
    }
}