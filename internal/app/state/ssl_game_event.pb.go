// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_game_event.proto

package state

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Team is either blue or yellow
type Team int32

const (
	// team not set
	Team_UNKNOWN Team = 0
	// yellow team
	Team_YELLOW Team = 1
	// blue team
	Team_BLUE Team = 2
)

var Team_name = map[int32]string{
	0: "UNKNOWN",
	1: "YELLOW",
	2: "BLUE",
}

var Team_value = map[string]int32{
	"UNKNOWN": 0,
	"YELLOW":  1,
	"BLUE":    2,
}

func (x Team) Enum() *Team {
	p := new(Team)
	*p = x
	return p
}

func (x Team) String() string {
	return proto.EnumName(Team_name, int32(x))
}

func (x *Team) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Team_value, data, "Team")
	if err != nil {
		return err
	}
	*x = Team(value)
	return nil
}

func (Team) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{0}
}

type GameEvent_Type int32

const (
	GameEvent_UNKNOWN_GAME_EVENT_TYPE                           GameEvent_Type = 0
	GameEvent_BALL_LEFT_FIELD_TOUCH_LINE                        GameEvent_Type = 6
	GameEvent_BALL_LEFT_FIELD_GOAL_LINE                         GameEvent_Type = 7
	GameEvent_AIMLESS_KICK                                      GameEvent_Type = 11
	GameEvent_POSSIBLE_GOAL                                     GameEvent_Type = 39
	GameEvent_NO_PROGRESS_IN_GAME                               GameEvent_Type = 2
	GameEvent_ATTACKER_DOUBLE_TOUCHED_BALL                      GameEvent_Type = 14
	GameEvent_BOUNDARY_CROSSING                                 GameEvent_Type = 41
	GameEvent_ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA                GameEvent_Type = 19
	GameEvent_DEFENDER_IN_DEFENSE_AREA                          GameEvent_Type = 31
	GameEvent_KEEPER_HELD_BALL                                  GameEvent_Type = 13
	GameEvent_BOT_DRIBBLED_BALL_TOO_FAR                         GameEvent_Type = 17
	GameEvent_ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA             GameEvent_Type = 15
	GameEvent_BOT_KICKED_BALL_TOO_FAST                          GameEvent_Type = 18
	GameEvent_BOT_CRASH_UNIQUE                                  GameEvent_Type = 22
	GameEvent_BOT_CRASH_DRAWN                                   GameEvent_Type = 21
	GameEvent_DEFENDER_TOO_CLOSE_TO_KICK_POINT                  GameEvent_Type = 29
	GameEvent_BOT_TOO_FAST_IN_STOP                              GameEvent_Type = 28
	GameEvent_BOT_INTERFERED_PLACEMENT                          GameEvent_Type = 20
	GameEvent_GOAL                                              GameEvent_Type = 8
	GameEvent_INVALID_GOAL                                      GameEvent_Type = 42
	GameEvent_PLACEMENT_FAILED                                  GameEvent_Type = 3
	GameEvent_PLACEMENT_SUCCEEDED                               GameEvent_Type = 5
	GameEvent_MULTIPLE_CARDS                                    GameEvent_Type = 32
	GameEvent_MULTIPLE_FOULS                                    GameEvent_Type = 34
	GameEvent_BOT_SUBSTITUTION                                  GameEvent_Type = 37
	GameEvent_UNSPORTING_BEHAVIOR_MINOR                         GameEvent_Type = 35
	GameEvent_UNSPORTING_BEHAVIOR_MAJOR                         GameEvent_Type = 36
	GameEvent_BOT_PUSHED_BOT                                    GameEvent_Type = 24
	GameEvent_BOT_HELD_BALL_DELIBERATELY                        GameEvent_Type = 26
	GameEvent_BOT_TIPPED_OVER                                   GameEvent_Type = 27
	GameEvent_PREPARED                                          GameEvent_Type = 1  // Deprecated: Do not use.
	GameEvent_TOO_MANY_ROBOTS                                   GameEvent_Type = 38 // Deprecated: Do not use.
	GameEvent_INDIRECT_GOAL                                     GameEvent_Type = 9  // Deprecated: Do not use.
	GameEvent_CHIPPED_GOAL                                      GameEvent_Type = 10 // Deprecated: Do not use.
	GameEvent_KICK_TIMEOUT                                      GameEvent_Type = 12 // Deprecated: Do not use.
	GameEvent_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA         GameEvent_Type = 16 // Deprecated: Do not use.
	GameEvent_ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED GameEvent_Type = 40 // Deprecated: Do not use.
	GameEvent_BOT_CRASH_UNIQUE_SKIPPED                          GameEvent_Type = 23 // Deprecated: Do not use.
	GameEvent_BOT_PUSHED_BOT_SKIPPED                            GameEvent_Type = 25 // Deprecated: Do not use.
	GameEvent_DEFENDER_IN_DEFENSE_AREA_PARTIALLY                GameEvent_Type = 30 // Deprecated: Do not use.
	GameEvent_MULTIPLE_PLACEMENT_FAILURES                       GameEvent_Type = 33 // Deprecated: Do not use.
)

var GameEvent_Type_name = map[int32]string{
	0:  "UNKNOWN_GAME_EVENT_TYPE",
	6:  "BALL_LEFT_FIELD_TOUCH_LINE",
	7:  "BALL_LEFT_FIELD_GOAL_LINE",
	11: "AIMLESS_KICK",
	39: "POSSIBLE_GOAL",
	2:  "NO_PROGRESS_IN_GAME",
	14: "ATTACKER_DOUBLE_TOUCHED_BALL",
	41: "BOUNDARY_CROSSING",
	19: "ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA",
	31: "DEFENDER_IN_DEFENSE_AREA",
	13: "KEEPER_HELD_BALL",
	17: "BOT_DRIBBLED_BALL_TOO_FAR",
	15: "ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA",
	18: "BOT_KICKED_BALL_TOO_FAST",
	22: "BOT_CRASH_UNIQUE",
	21: "BOT_CRASH_DRAWN",
	29: "DEFENDER_TOO_CLOSE_TO_KICK_POINT",
	28: "BOT_TOO_FAST_IN_STOP",
	20: "BOT_INTERFERED_PLACEMENT",
	8:  "GOAL",
	42: "INVALID_GOAL",
	3:  "PLACEMENT_FAILED",
	5:  "PLACEMENT_SUCCEEDED",
	32: "MULTIPLE_CARDS",
	34: "MULTIPLE_FOULS",
	37: "BOT_SUBSTITUTION",
	35: "UNSPORTING_BEHAVIOR_MINOR",
	36: "UNSPORTING_BEHAVIOR_MAJOR",
	24: "BOT_PUSHED_BOT",
	26: "BOT_HELD_BALL_DELIBERATELY",
	27: "BOT_TIPPED_OVER",
	1:  "PREPARED",
	38: "TOO_MANY_ROBOTS",
	9:  "INDIRECT_GOAL",
	10: "CHIPPED_GOAL",
	12: "KICK_TIMEOUT",
	16: "ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA",
	40: "ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED",
	23: "BOT_CRASH_UNIQUE_SKIPPED",
	25: "BOT_PUSHED_BOT_SKIPPED",
	30: "DEFENDER_IN_DEFENSE_AREA_PARTIALLY",
	33: "MULTIPLE_PLACEMENT_FAILURES",
}

var GameEvent_Type_value = map[string]int32{
	"UNKNOWN_GAME_EVENT_TYPE":                   0,
	"BALL_LEFT_FIELD_TOUCH_LINE":                6,
	"BALL_LEFT_FIELD_GOAL_LINE":                 7,
	"AIMLESS_KICK":                              11,
	"POSSIBLE_GOAL":                             39,
	"NO_PROGRESS_IN_GAME":                       2,
	"ATTACKER_DOUBLE_TOUCHED_BALL":              14,
	"BOUNDARY_CROSSING":                         41,
	"ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA":        19,
	"DEFENDER_IN_DEFENSE_AREA":                  31,
	"KEEPER_HELD_BALL":                          13,
	"BOT_DRIBBLED_BALL_TOO_FAR":                 17,
	"ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA":     15,
	"BOT_KICKED_BALL_TOO_FAST":                  18,
	"BOT_CRASH_UNIQUE":                          22,
	"BOT_CRASH_DRAWN":                           21,
	"DEFENDER_TOO_CLOSE_TO_KICK_POINT":          29,
	"BOT_TOO_FAST_IN_STOP":                      28,
	"BOT_INTERFERED_PLACEMENT":                  20,
	"GOAL":                                      8,
	"INVALID_GOAL":                              42,
	"PLACEMENT_FAILED":                          3,
	"PLACEMENT_SUCCEEDED":                       5,
	"MULTIPLE_CARDS":                            32,
	"MULTIPLE_FOULS":                            34,
	"BOT_SUBSTITUTION":                          37,
	"UNSPORTING_BEHAVIOR_MINOR":                 35,
	"UNSPORTING_BEHAVIOR_MAJOR":                 36,
	"BOT_PUSHED_BOT":                            24,
	"BOT_HELD_BALL_DELIBERATELY":                26,
	"BOT_TIPPED_OVER":                           27,
	"PREPARED":                                  1,
	"TOO_MANY_ROBOTS":                           38,
	"INDIRECT_GOAL":                             9,
	"CHIPPED_GOAL":                              10,
	"KICK_TIMEOUT":                              12,
	"ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA": 16,
	"ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED": 40,
	"BOT_CRASH_UNIQUE_SKIPPED":                          23,
	"BOT_PUSHED_BOT_SKIPPED":                            25,
	"DEFENDER_IN_DEFENSE_AREA_PARTIALLY":                30,
	"MULTIPLE_PLACEMENT_FAILURES":                       33,
}

func (x GameEvent_Type) Enum() *GameEvent_Type {
	p := new(GameEvent_Type)
	*p = x
	return p
}

func (x GameEvent_Type) String() string {
	return proto.EnumName(GameEvent_Type_name, int32(x))
}

func (x *GameEvent_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GameEvent_Type_value, data, "GameEvent_Type")
	if err != nil {
		return err
	}
	*x = GameEvent_Type(value)
	return nil
}

func (GameEvent_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 0}
}

// BotId is the combination of a team and a robot id
type BotId struct {
	// the robot id - a negative value indicates that the id is not set
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// the team that the robot belongs to
	Team                 *Team    `protobuf:"varint,2,opt,name=team,enum=Team" json:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BotId) Reset()         { *m = BotId{} }
func (m *BotId) String() string { return proto.CompactTextString(m) }
func (*BotId) ProtoMessage()    {}
func (*BotId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{0}
}

func (m *BotId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BotId.Unmarshal(m, b)
}
func (m *BotId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BotId.Marshal(b, m, deterministic)
}
func (m *BotId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotId.Merge(m, src)
}
func (m *BotId) XXX_Size() int {
	return xxx_messageInfo_BotId.Size(m)
}
func (m *BotId) XXX_DiscardUnknown() {
	xxx_messageInfo_BotId.DiscardUnknown(m)
}

var xxx_messageInfo_BotId proto.InternalMessageInfo

func (m *BotId) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *BotId) GetTeam() Team {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Team_UNKNOWN
}

// Location is a 2d-coordinate on the field in ssl-vision coordinate system. Units are in meters.
type Location struct {
	// the x-coordinate in [m] in the ssl-vision coordinate system
	X *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	// the y-coordinate in [m] in the ssl-vision coordinate system
	Y                    *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{1}
}

func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetX() float32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Location) GetY() float32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

// GameEvent contains exactly one game event
// Each game event has optional and required fields. The required fields are mandatory to process the event.
// Some optional fields are only used for visualization, others are required to determine the ball placement position.
// If fields are missing that are required for the ball placement position, no ball placement command will be issued.
// Fields are marked optional to make testing and extending of the protocol easier.
// An autoRef should ideally set all fields, except if there are good reasons to not do so.
type GameEvent struct {
	Type *GameEvent_Type `protobuf:"varint,40,req,name=type,enum=GameEvent_Type" json:"type,omitempty"`
	// the origins of this game event
	// empty, if it originates from game controller
	// autoRef name(s), if it originates from one or more autoRefs
	// ignored if sent by autoRef to game controller
	Origin []string `protobuf:"bytes,41,rep,name=origin" json:"origin,omitempty"`
	// the event that occurred
	//
	// Types that are valid to be assigned to Event:
	//	*GameEvent_BallLeftFieldTouchLine
	//	*GameEvent_BallLeftFieldGoalLine
	//	*GameEvent_AimlessKick_
	//	*GameEvent_PossibleGoal
	//	*GameEvent_NoProgressInGame_
	//	*GameEvent_AttackerDoubleTouchedBall_
	//	*GameEvent_AttackerTooCloseToDefenseArea_
	//	*GameEvent_DefenderInDefenseArea_
	//	*GameEvent_BoundaryCrossing_
	//	*GameEvent_KeeperHeldBall_
	//	*GameEvent_BotDribbledBallTooFar_
	//	*GameEvent_AttackerTouchedBallInDefenseArea_
	//	*GameEvent_BotKickedBallTooFast_
	//	*GameEvent_BotCrashUnique_
	//	*GameEvent_BotCrashDrawn_
	//	*GameEvent_DefenderTooCloseToKickPoint_
	//	*GameEvent_BotTooFastInStop_
	//	*GameEvent_BotInterferedPlacement_
	//	*GameEvent_Goal_
	//	*GameEvent_InvalidGoal
	//	*GameEvent_PlacementFailed_
	//	*GameEvent_PlacementSucceeded_
	//	*GameEvent_MultipleCards_
	//	*GameEvent_MultipleFouls_
	//	*GameEvent_BotSubstitution_
	//	*GameEvent_UnsportingBehaviorMinor_
	//	*GameEvent_UnsportingBehaviorMajor_
	//	*GameEvent_BotPushedBot_
	//	*GameEvent_BotHeldBallDeliberately_
	//	*GameEvent_BotTippedOver_
	//	*GameEvent_Prepared_
	//	*GameEvent_TooManyRobots_
	//	*GameEvent_IndirectGoal_
	//	*GameEvent_ChippedGoal_
	//	*GameEvent_KickTimeout_
	//	*GameEvent_AttackerTouchedOpponentInDefenseArea_
	//	*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped
	//	*GameEvent_BotCrashUniqueSkipped
	//	*GameEvent_BotPushedBotSkipped
	//	*GameEvent_DefenderInDefenseAreaPartially_
	//	*GameEvent_MultiplePlacementFailures_
	Event                isGameEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GameEvent) Reset()         { *m = GameEvent{} }
func (m *GameEvent) String() string { return proto.CompactTextString(m) }
func (*GameEvent) ProtoMessage()    {}
func (*GameEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2}
}

func (m *GameEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent.Unmarshal(m, b)
}
func (m *GameEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent.Marshal(b, m, deterministic)
}
func (m *GameEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent.Merge(m, src)
}
func (m *GameEvent) XXX_Size() int {
	return xxx_messageInfo_GameEvent.Size(m)
}
func (m *GameEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent proto.InternalMessageInfo

func (m *GameEvent) GetType() GameEvent_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return GameEvent_UNKNOWN_GAME_EVENT_TYPE
}

func (m *GameEvent) GetOrigin() []string {
	if m != nil {
		return m.Origin
	}
	return nil
}

type isGameEvent_Event interface {
	isGameEvent_Event()
}

type GameEvent_BallLeftFieldTouchLine struct {
	BallLeftFieldTouchLine *GameEvent_BallLeftField `protobuf:"bytes,6,opt,name=ball_left_field_touch_line,json=ballLeftFieldTouchLine,oneof"`
}

type GameEvent_BallLeftFieldGoalLine struct {
	BallLeftFieldGoalLine *GameEvent_BallLeftField `protobuf:"bytes,7,opt,name=ball_left_field_goal_line,json=ballLeftFieldGoalLine,oneof"`
}

type GameEvent_AimlessKick_ struct {
	AimlessKick *GameEvent_AimlessKick `protobuf:"bytes,11,opt,name=aimless_kick,json=aimlessKick,oneof"`
}

type GameEvent_PossibleGoal struct {
	PossibleGoal *GameEvent_Goal `protobuf:"bytes,39,opt,name=possible_goal,json=possibleGoal,oneof"`
}

type GameEvent_NoProgressInGame_ struct {
	NoProgressInGame *GameEvent_NoProgressInGame `protobuf:"bytes,2,opt,name=no_progress_in_game,json=noProgressInGame,oneof"`
}

type GameEvent_AttackerDoubleTouchedBall_ struct {
	AttackerDoubleTouchedBall *GameEvent_AttackerDoubleTouchedBall `protobuf:"bytes,14,opt,name=attacker_double_touched_ball,json=attackerDoubleTouchedBall,oneof"`
}

type GameEvent_AttackerTooCloseToDefenseArea_ struct {
	AttackerTooCloseToDefenseArea *GameEvent_AttackerTooCloseToDefenseArea `protobuf:"bytes,19,opt,name=attacker_too_close_to_defense_area,json=attackerTooCloseToDefenseArea,oneof"`
}

type GameEvent_DefenderInDefenseArea_ struct {
	DefenderInDefenseArea *GameEvent_DefenderInDefenseArea `protobuf:"bytes,31,opt,name=defender_in_defense_area,json=defenderInDefenseArea,oneof"`
}

type GameEvent_BoundaryCrossing_ struct {
	BoundaryCrossing *GameEvent_BoundaryCrossing `protobuf:"bytes,43,opt,name=boundary_crossing,json=boundaryCrossing,oneof"`
}

type GameEvent_KeeperHeldBall_ struct {
	KeeperHeldBall *GameEvent_KeeperHeldBall `protobuf:"bytes,13,opt,name=keeper_held_ball,json=keeperHeldBall,oneof"`
}

type GameEvent_BotDribbledBallTooFar_ struct {
	BotDribbledBallTooFar *GameEvent_BotDribbledBallTooFar `protobuf:"bytes,17,opt,name=bot_dribbled_ball_too_far,json=botDribbledBallTooFar,oneof"`
}

type GameEvent_AttackerTouchedBallInDefenseArea_ struct {
	AttackerTouchedBallInDefenseArea *GameEvent_AttackerTouchedBallInDefenseArea `protobuf:"bytes,15,opt,name=attacker_touched_ball_in_defense_area,json=attackerTouchedBallInDefenseArea,oneof"`
}

type GameEvent_BotKickedBallTooFast_ struct {
	BotKickedBallTooFast *GameEvent_BotKickedBallTooFast `protobuf:"bytes,18,opt,name=bot_kicked_ball_too_fast,json=botKickedBallTooFast,oneof"`
}

type GameEvent_BotCrashUnique_ struct {
	BotCrashUnique *GameEvent_BotCrashUnique `protobuf:"bytes,22,opt,name=bot_crash_unique,json=botCrashUnique,oneof"`
}

type GameEvent_BotCrashDrawn_ struct {
	BotCrashDrawn *GameEvent_BotCrashDrawn `protobuf:"bytes,21,opt,name=bot_crash_drawn,json=botCrashDrawn,oneof"`
}

type GameEvent_DefenderTooCloseToKickPoint_ struct {
	DefenderTooCloseToKickPoint *GameEvent_DefenderTooCloseToKickPoint `protobuf:"bytes,29,opt,name=defender_too_close_to_kick_point,json=defenderTooCloseToKickPoint,oneof"`
}

type GameEvent_BotTooFastInStop_ struct {
	BotTooFastInStop *GameEvent_BotTooFastInStop `protobuf:"bytes,28,opt,name=bot_too_fast_in_stop,json=botTooFastInStop,oneof"`
}

type GameEvent_BotInterferedPlacement_ struct {
	BotInterferedPlacement *GameEvent_BotInterferedPlacement `protobuf:"bytes,20,opt,name=bot_interfered_placement,json=botInterferedPlacement,oneof"`
}

type GameEvent_Goal_ struct {
	Goal *GameEvent_Goal `protobuf:"bytes,8,opt,name=goal,oneof"`
}

type GameEvent_InvalidGoal struct {
	InvalidGoal *GameEvent_Goal `protobuf:"bytes,44,opt,name=invalid_goal,json=invalidGoal,oneof"`
}

type GameEvent_PlacementFailed_ struct {
	PlacementFailed *GameEvent_PlacementFailed `protobuf:"bytes,3,opt,name=placement_failed,json=placementFailed,oneof"`
}

type GameEvent_PlacementSucceeded_ struct {
	PlacementSucceeded *GameEvent_PlacementSucceeded `protobuf:"bytes,5,opt,name=placement_succeeded,json=placementSucceeded,oneof"`
}

type GameEvent_MultipleCards_ struct {
	MultipleCards *GameEvent_MultipleCards `protobuf:"bytes,32,opt,name=multiple_cards,json=multipleCards,oneof"`
}

type GameEvent_MultipleFouls_ struct {
	MultipleFouls *GameEvent_MultipleFouls `protobuf:"bytes,34,opt,name=multiple_fouls,json=multipleFouls,oneof"`
}

type GameEvent_BotSubstitution_ struct {
	BotSubstitution *GameEvent_BotSubstitution `protobuf:"bytes,37,opt,name=bot_substitution,json=botSubstitution,oneof"`
}

type GameEvent_UnsportingBehaviorMinor_ struct {
	UnsportingBehaviorMinor *GameEvent_UnsportingBehaviorMinor `protobuf:"bytes,35,opt,name=unsporting_behavior_minor,json=unsportingBehaviorMinor,oneof"`
}

type GameEvent_UnsportingBehaviorMajor_ struct {
	UnsportingBehaviorMajor *GameEvent_UnsportingBehaviorMajor `protobuf:"bytes,36,opt,name=unsporting_behavior_major,json=unsportingBehaviorMajor,oneof"`
}

type GameEvent_BotPushedBot_ struct {
	BotPushedBot *GameEvent_BotPushedBot `protobuf:"bytes,24,opt,name=bot_pushed_bot,json=botPushedBot,oneof"`
}

type GameEvent_BotHeldBallDeliberately_ struct {
	BotHeldBallDeliberately *GameEvent_BotHeldBallDeliberately `protobuf:"bytes,26,opt,name=bot_held_ball_deliberately,json=botHeldBallDeliberately,oneof"`
}

type GameEvent_BotTippedOver_ struct {
	BotTippedOver *GameEvent_BotTippedOver `protobuf:"bytes,27,opt,name=bot_tipped_over,json=botTippedOver,oneof"`
}

type GameEvent_Prepared_ struct {
	Prepared *GameEvent_Prepared `protobuf:"bytes,1,opt,name=prepared,oneof"`
}

type GameEvent_TooManyRobots_ struct {
	TooManyRobots *GameEvent_TooManyRobots `protobuf:"bytes,38,opt,name=too_many_robots,json=tooManyRobots,oneof"`
}

type GameEvent_IndirectGoal_ struct {
	IndirectGoal *GameEvent_IndirectGoal `protobuf:"bytes,9,opt,name=indirect_goal,json=indirectGoal,oneof"`
}

type GameEvent_ChippedGoal_ struct {
	ChippedGoal *GameEvent_ChippedGoal `protobuf:"bytes,10,opt,name=chipped_goal,json=chippedGoal,oneof"`
}

type GameEvent_KickTimeout_ struct {
	KickTimeout *GameEvent_KickTimeout `protobuf:"bytes,12,opt,name=kick_timeout,json=kickTimeout,oneof"`
}

type GameEvent_AttackerTouchedOpponentInDefenseArea_ struct {
	AttackerTouchedOpponentInDefenseArea *GameEvent_AttackerTouchedOpponentInDefenseArea `protobuf:"bytes,16,opt,name=attacker_touched_opponent_in_defense_area,json=attackerTouchedOpponentInDefenseArea,oneof"`
}

type GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped struct {
	AttackerTouchedOpponentInDefenseAreaSkipped *GameEvent_AttackerTouchedOpponentInDefenseArea `protobuf:"bytes,42,opt,name=attacker_touched_opponent_in_defense_area_skipped,json=attackerTouchedOpponentInDefenseAreaSkipped,oneof"`
}

type GameEvent_BotCrashUniqueSkipped struct {
	BotCrashUniqueSkipped *GameEvent_BotCrashUnique `protobuf:"bytes,23,opt,name=bot_crash_unique_skipped,json=botCrashUniqueSkipped,oneof"`
}

type GameEvent_BotPushedBotSkipped struct {
	BotPushedBotSkipped *GameEvent_BotPushedBot `protobuf:"bytes,25,opt,name=bot_pushed_bot_skipped,json=botPushedBotSkipped,oneof"`
}

type GameEvent_DefenderInDefenseAreaPartially_ struct {
	DefenderInDefenseAreaPartially *GameEvent_DefenderInDefenseAreaPartially `protobuf:"bytes,30,opt,name=defender_in_defense_area_partially,json=defenderInDefenseAreaPartially,oneof"`
}

type GameEvent_MultiplePlacementFailures_ struct {
	MultiplePlacementFailures *GameEvent_MultiplePlacementFailures `protobuf:"bytes,33,opt,name=multiple_placement_failures,json=multiplePlacementFailures,oneof"`
}

func (*GameEvent_BallLeftFieldTouchLine) isGameEvent_Event() {}

func (*GameEvent_BallLeftFieldGoalLine) isGameEvent_Event() {}

func (*GameEvent_AimlessKick_) isGameEvent_Event() {}

func (*GameEvent_PossibleGoal) isGameEvent_Event() {}

func (*GameEvent_NoProgressInGame_) isGameEvent_Event() {}

func (*GameEvent_AttackerDoubleTouchedBall_) isGameEvent_Event() {}

func (*GameEvent_AttackerTooCloseToDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_DefenderInDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_BoundaryCrossing_) isGameEvent_Event() {}

func (*GameEvent_KeeperHeldBall_) isGameEvent_Event() {}

func (*GameEvent_BotDribbledBallTooFar_) isGameEvent_Event() {}

func (*GameEvent_AttackerTouchedBallInDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_BotKickedBallTooFast_) isGameEvent_Event() {}

func (*GameEvent_BotCrashUnique_) isGameEvent_Event() {}

func (*GameEvent_BotCrashDrawn_) isGameEvent_Event() {}

func (*GameEvent_DefenderTooCloseToKickPoint_) isGameEvent_Event() {}

func (*GameEvent_BotTooFastInStop_) isGameEvent_Event() {}

func (*GameEvent_BotInterferedPlacement_) isGameEvent_Event() {}

func (*GameEvent_Goal_) isGameEvent_Event() {}

func (*GameEvent_InvalidGoal) isGameEvent_Event() {}

func (*GameEvent_PlacementFailed_) isGameEvent_Event() {}

func (*GameEvent_PlacementSucceeded_) isGameEvent_Event() {}

func (*GameEvent_MultipleCards_) isGameEvent_Event() {}

func (*GameEvent_MultipleFouls_) isGameEvent_Event() {}

func (*GameEvent_BotSubstitution_) isGameEvent_Event() {}

func (*GameEvent_UnsportingBehaviorMinor_) isGameEvent_Event() {}

func (*GameEvent_UnsportingBehaviorMajor_) isGameEvent_Event() {}

func (*GameEvent_BotPushedBot_) isGameEvent_Event() {}

func (*GameEvent_BotHeldBallDeliberately_) isGameEvent_Event() {}

func (*GameEvent_BotTippedOver_) isGameEvent_Event() {}

func (*GameEvent_Prepared_) isGameEvent_Event() {}

func (*GameEvent_TooManyRobots_) isGameEvent_Event() {}

func (*GameEvent_IndirectGoal_) isGameEvent_Event() {}

func (*GameEvent_ChippedGoal_) isGameEvent_Event() {}

func (*GameEvent_KickTimeout_) isGameEvent_Event() {}

func (*GameEvent_AttackerTouchedOpponentInDefenseArea_) isGameEvent_Event() {}

func (*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped) isGameEvent_Event() {}

func (*GameEvent_BotCrashUniqueSkipped) isGameEvent_Event() {}

func (*GameEvent_BotPushedBotSkipped) isGameEvent_Event() {}

func (*GameEvent_DefenderInDefenseAreaPartially_) isGameEvent_Event() {}

func (*GameEvent_MultiplePlacementFailures_) isGameEvent_Event() {}

func (m *GameEvent) GetEvent() isGameEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *GameEvent) GetBallLeftFieldTouchLine() *GameEvent_BallLeftField {
	if x, ok := m.GetEvent().(*GameEvent_BallLeftFieldTouchLine); ok {
		return x.BallLeftFieldTouchLine
	}
	return nil
}

func (m *GameEvent) GetBallLeftFieldGoalLine() *GameEvent_BallLeftField {
	if x, ok := m.GetEvent().(*GameEvent_BallLeftFieldGoalLine); ok {
		return x.BallLeftFieldGoalLine
	}
	return nil
}

func (m *GameEvent) GetAimlessKick() *GameEvent_AimlessKick {
	if x, ok := m.GetEvent().(*GameEvent_AimlessKick_); ok {
		return x.AimlessKick
	}
	return nil
}

func (m *GameEvent) GetPossibleGoal() *GameEvent_Goal {
	if x, ok := m.GetEvent().(*GameEvent_PossibleGoal); ok {
		return x.PossibleGoal
	}
	return nil
}

func (m *GameEvent) GetNoProgressInGame() *GameEvent_NoProgressInGame {
	if x, ok := m.GetEvent().(*GameEvent_NoProgressInGame_); ok {
		return x.NoProgressInGame
	}
	return nil
}

func (m *GameEvent) GetAttackerDoubleTouchedBall() *GameEvent_AttackerDoubleTouchedBall {
	if x, ok := m.GetEvent().(*GameEvent_AttackerDoubleTouchedBall_); ok {
		return x.AttackerDoubleTouchedBall
	}
	return nil
}

func (m *GameEvent) GetAttackerTooCloseToDefenseArea() *GameEvent_AttackerTooCloseToDefenseArea {
	if x, ok := m.GetEvent().(*GameEvent_AttackerTooCloseToDefenseArea_); ok {
		return x.AttackerTooCloseToDefenseArea
	}
	return nil
}

func (m *GameEvent) GetDefenderInDefenseArea() *GameEvent_DefenderInDefenseArea {
	if x, ok := m.GetEvent().(*GameEvent_DefenderInDefenseArea_); ok {
		return x.DefenderInDefenseArea
	}
	return nil
}

func (m *GameEvent) GetBoundaryCrossing() *GameEvent_BoundaryCrossing {
	if x, ok := m.GetEvent().(*GameEvent_BoundaryCrossing_); ok {
		return x.BoundaryCrossing
	}
	return nil
}

func (m *GameEvent) GetKeeperHeldBall() *GameEvent_KeeperHeldBall {
	if x, ok := m.GetEvent().(*GameEvent_KeeperHeldBall_); ok {
		return x.KeeperHeldBall
	}
	return nil
}

func (m *GameEvent) GetBotDribbledBallTooFar() *GameEvent_BotDribbledBallTooFar {
	if x, ok := m.GetEvent().(*GameEvent_BotDribbledBallTooFar_); ok {
		return x.BotDribbledBallTooFar
	}
	return nil
}

func (m *GameEvent) GetAttackerTouchedBallInDefenseArea() *GameEvent_AttackerTouchedBallInDefenseArea {
	if x, ok := m.GetEvent().(*GameEvent_AttackerTouchedBallInDefenseArea_); ok {
		return x.AttackerTouchedBallInDefenseArea
	}
	return nil
}

func (m *GameEvent) GetBotKickedBallTooFast() *GameEvent_BotKickedBallTooFast {
	if x, ok := m.GetEvent().(*GameEvent_BotKickedBallTooFast_); ok {
		return x.BotKickedBallTooFast
	}
	return nil
}

func (m *GameEvent) GetBotCrashUnique() *GameEvent_BotCrashUnique {
	if x, ok := m.GetEvent().(*GameEvent_BotCrashUnique_); ok {
		return x.BotCrashUnique
	}
	return nil
}

func (m *GameEvent) GetBotCrashDrawn() *GameEvent_BotCrashDrawn {
	if x, ok := m.GetEvent().(*GameEvent_BotCrashDrawn_); ok {
		return x.BotCrashDrawn
	}
	return nil
}

func (m *GameEvent) GetDefenderTooCloseToKickPoint() *GameEvent_DefenderTooCloseToKickPoint {
	if x, ok := m.GetEvent().(*GameEvent_DefenderTooCloseToKickPoint_); ok {
		return x.DefenderTooCloseToKickPoint
	}
	return nil
}

func (m *GameEvent) GetBotTooFastInStop() *GameEvent_BotTooFastInStop {
	if x, ok := m.GetEvent().(*GameEvent_BotTooFastInStop_); ok {
		return x.BotTooFastInStop
	}
	return nil
}

func (m *GameEvent) GetBotInterferedPlacement() *GameEvent_BotInterferedPlacement {
	if x, ok := m.GetEvent().(*GameEvent_BotInterferedPlacement_); ok {
		return x.BotInterferedPlacement
	}
	return nil
}

func (m *GameEvent) GetGoal() *GameEvent_Goal {
	if x, ok := m.GetEvent().(*GameEvent_Goal_); ok {
		return x.Goal
	}
	return nil
}

func (m *GameEvent) GetInvalidGoal() *GameEvent_Goal {
	if x, ok := m.GetEvent().(*GameEvent_InvalidGoal); ok {
		return x.InvalidGoal
	}
	return nil
}

func (m *GameEvent) GetPlacementFailed() *GameEvent_PlacementFailed {
	if x, ok := m.GetEvent().(*GameEvent_PlacementFailed_); ok {
		return x.PlacementFailed
	}
	return nil
}

func (m *GameEvent) GetPlacementSucceeded() *GameEvent_PlacementSucceeded {
	if x, ok := m.GetEvent().(*GameEvent_PlacementSucceeded_); ok {
		return x.PlacementSucceeded
	}
	return nil
}

func (m *GameEvent) GetMultipleCards() *GameEvent_MultipleCards {
	if x, ok := m.GetEvent().(*GameEvent_MultipleCards_); ok {
		return x.MultipleCards
	}
	return nil
}

func (m *GameEvent) GetMultipleFouls() *GameEvent_MultipleFouls {
	if x, ok := m.GetEvent().(*GameEvent_MultipleFouls_); ok {
		return x.MultipleFouls
	}
	return nil
}

func (m *GameEvent) GetBotSubstitution() *GameEvent_BotSubstitution {
	if x, ok := m.GetEvent().(*GameEvent_BotSubstitution_); ok {
		return x.BotSubstitution
	}
	return nil
}

func (m *GameEvent) GetUnsportingBehaviorMinor() *GameEvent_UnsportingBehaviorMinor {
	if x, ok := m.GetEvent().(*GameEvent_UnsportingBehaviorMinor_); ok {
		return x.UnsportingBehaviorMinor
	}
	return nil
}

func (m *GameEvent) GetUnsportingBehaviorMajor() *GameEvent_UnsportingBehaviorMajor {
	if x, ok := m.GetEvent().(*GameEvent_UnsportingBehaviorMajor_); ok {
		return x.UnsportingBehaviorMajor
	}
	return nil
}

func (m *GameEvent) GetBotPushedBot() *GameEvent_BotPushedBot {
	if x, ok := m.GetEvent().(*GameEvent_BotPushedBot_); ok {
		return x.BotPushedBot
	}
	return nil
}

func (m *GameEvent) GetBotHeldBallDeliberately() *GameEvent_BotHeldBallDeliberately {
	if x, ok := m.GetEvent().(*GameEvent_BotHeldBallDeliberately_); ok {
		return x.BotHeldBallDeliberately
	}
	return nil
}

func (m *GameEvent) GetBotTippedOver() *GameEvent_BotTippedOver {
	if x, ok := m.GetEvent().(*GameEvent_BotTippedOver_); ok {
		return x.BotTippedOver
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetPrepared() *GameEvent_Prepared {
	if x, ok := m.GetEvent().(*GameEvent_Prepared_); ok {
		return x.Prepared
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetTooManyRobots() *GameEvent_TooManyRobots {
	if x, ok := m.GetEvent().(*GameEvent_TooManyRobots_); ok {
		return x.TooManyRobots
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetIndirectGoal() *GameEvent_IndirectGoal {
	if x, ok := m.GetEvent().(*GameEvent_IndirectGoal_); ok {
		return x.IndirectGoal
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetChippedGoal() *GameEvent_ChippedGoal {
	if x, ok := m.GetEvent().(*GameEvent_ChippedGoal_); ok {
		return x.ChippedGoal
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetKickTimeout() *GameEvent_KickTimeout {
	if x, ok := m.GetEvent().(*GameEvent_KickTimeout_); ok {
		return x.KickTimeout
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetAttackerTouchedOpponentInDefenseArea() *GameEvent_AttackerTouchedOpponentInDefenseArea {
	if x, ok := m.GetEvent().(*GameEvent_AttackerTouchedOpponentInDefenseArea_); ok {
		return x.AttackerTouchedOpponentInDefenseArea
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetAttackerTouchedOpponentInDefenseAreaSkipped() *GameEvent_AttackerTouchedOpponentInDefenseArea {
	if x, ok := m.GetEvent().(*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped); ok {
		return x.AttackerTouchedOpponentInDefenseAreaSkipped
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetBotCrashUniqueSkipped() *GameEvent_BotCrashUnique {
	if x, ok := m.GetEvent().(*GameEvent_BotCrashUniqueSkipped); ok {
		return x.BotCrashUniqueSkipped
	}
	return nil
}

func (m *GameEvent) GetBotPushedBotSkipped() *GameEvent_BotPushedBot {
	if x, ok := m.GetEvent().(*GameEvent_BotPushedBotSkipped); ok {
		return x.BotPushedBotSkipped
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetDefenderInDefenseAreaPartially() *GameEvent_DefenderInDefenseAreaPartially {
	if x, ok := m.GetEvent().(*GameEvent_DefenderInDefenseAreaPartially_); ok {
		return x.DefenderInDefenseAreaPartially
	}
	return nil
}

// Deprecated: Do not use.
func (m *GameEvent) GetMultiplePlacementFailures() *GameEvent_MultiplePlacementFailures {
	if x, ok := m.GetEvent().(*GameEvent_MultiplePlacementFailures_); ok {
		return x.MultiplePlacementFailures
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GameEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GameEvent_BallLeftFieldTouchLine)(nil),
		(*GameEvent_BallLeftFieldGoalLine)(nil),
		(*GameEvent_AimlessKick_)(nil),
		(*GameEvent_PossibleGoal)(nil),
		(*GameEvent_NoProgressInGame_)(nil),
		(*GameEvent_AttackerDoubleTouchedBall_)(nil),
		(*GameEvent_AttackerTooCloseToDefenseArea_)(nil),
		(*GameEvent_DefenderInDefenseArea_)(nil),
		(*GameEvent_BoundaryCrossing_)(nil),
		(*GameEvent_KeeperHeldBall_)(nil),
		(*GameEvent_BotDribbledBallTooFar_)(nil),
		(*GameEvent_AttackerTouchedBallInDefenseArea_)(nil),
		(*GameEvent_BotKickedBallTooFast_)(nil),
		(*GameEvent_BotCrashUnique_)(nil),
		(*GameEvent_BotCrashDrawn_)(nil),
		(*GameEvent_DefenderTooCloseToKickPoint_)(nil),
		(*GameEvent_BotTooFastInStop_)(nil),
		(*GameEvent_BotInterferedPlacement_)(nil),
		(*GameEvent_Goal_)(nil),
		(*GameEvent_InvalidGoal)(nil),
		(*GameEvent_PlacementFailed_)(nil),
		(*GameEvent_PlacementSucceeded_)(nil),
		(*GameEvent_MultipleCards_)(nil),
		(*GameEvent_MultipleFouls_)(nil),
		(*GameEvent_BotSubstitution_)(nil),
		(*GameEvent_UnsportingBehaviorMinor_)(nil),
		(*GameEvent_UnsportingBehaviorMajor_)(nil),
		(*GameEvent_BotPushedBot_)(nil),
		(*GameEvent_BotHeldBallDeliberately_)(nil),
		(*GameEvent_BotTippedOver_)(nil),
		(*GameEvent_Prepared_)(nil),
		(*GameEvent_TooManyRobots_)(nil),
		(*GameEvent_IndirectGoal_)(nil),
		(*GameEvent_ChippedGoal_)(nil),
		(*GameEvent_KickTimeout_)(nil),
		(*GameEvent_AttackerTouchedOpponentInDefenseArea_)(nil),
		(*GameEvent_AttackerTouchedOpponentInDefenseAreaSkipped)(nil),
		(*GameEvent_BotCrashUniqueSkipped)(nil),
		(*GameEvent_BotPushedBotSkipped)(nil),
		(*GameEvent_DefenderInDefenseAreaPartially_)(nil),
		(*GameEvent_MultiplePlacementFailures_)(nil),
	}
}

// the ball left the field normally
type GameEvent_BallLeftField struct {
	// the team that last touched the ball
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that last touched the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball left the field
	Location             *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_BallLeftField) Reset()         { *m = GameEvent_BallLeftField{} }
func (m *GameEvent_BallLeftField) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BallLeftField) ProtoMessage()    {}
func (*GameEvent_BallLeftField) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 0}
}

func (m *GameEvent_BallLeftField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BallLeftField.Unmarshal(m, b)
}
func (m *GameEvent_BallLeftField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BallLeftField.Marshal(b, m, deterministic)
}
func (m *GameEvent_BallLeftField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BallLeftField.Merge(m, src)
}
func (m *GameEvent_BallLeftField) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BallLeftField.Size(m)
}
func (m *GameEvent_BallLeftField) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BallLeftField.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BallLeftField proto.InternalMessageInfo

func (m *GameEvent_BallLeftField) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BallLeftField) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_BallLeftField) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// the ball left the field via goal line and a team committed an aimless kick
type GameEvent_AimlessKick struct {
	// the team that last touched the ball
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that last touched the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball left the field
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was last touched
	KickLocation         *Location `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_AimlessKick) Reset()         { *m = GameEvent_AimlessKick{} }
func (m *GameEvent_AimlessKick) String() string { return proto.CompactTextString(m) }
func (*GameEvent_AimlessKick) ProtoMessage()    {}
func (*GameEvent_AimlessKick) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 1}
}

func (m *GameEvent_AimlessKick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_AimlessKick.Unmarshal(m, b)
}
func (m *GameEvent_AimlessKick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_AimlessKick.Marshal(b, m, deterministic)
}
func (m *GameEvent_AimlessKick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_AimlessKick.Merge(m, src)
}
func (m *GameEvent_AimlessKick) XXX_Size() int {
	return xxx_messageInfo_GameEvent_AimlessKick.Size(m)
}
func (m *GameEvent_AimlessKick) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_AimlessKick.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_AimlessKick proto.InternalMessageInfo

func (m *GameEvent_AimlessKick) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_AimlessKick) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_AimlessKick) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_AimlessKick) GetKickLocation() *Location {
	if m != nil {
		return m.KickLocation
	}
	return nil
}

// a team shot a goal
type GameEvent_Goal struct {
	// the team that scored the goal
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the team that shot the goal (different from by_team for own goals)
	KickingTeam *Team `protobuf:"varint,6,opt,name=kicking_team,json=kickingTeam,enum=Team" json:"kicking_team,omitempty"`
	// the bot that shot the goal
	KickingBot *uint32 `protobuf:"varint,2,opt,name=kicking_bot,json=kickingBot" json:"kicking_bot,omitempty"`
	// the location where the ball entered the goal
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was kicked (for deciding if this was a valid goal)
	KickLocation *Location `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
	// the kick speed of the goal shot (for deciding if this was a valid goal)
	KickSpeed *float32 `protobuf:"fixed32,5,opt,name=kick_speed,json=kickSpeed" json:"kick_speed,omitempty"`
	// the maximum height the ball reached during the goal kick (for deciding if this was a valid goal)
	MaxBallHeight        *float32 `protobuf:"fixed32,7,opt,name=max_ball_height,json=maxBallHeight" json:"max_ball_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_Goal) Reset()         { *m = GameEvent_Goal{} }
func (m *GameEvent_Goal) String() string { return proto.CompactTextString(m) }
func (*GameEvent_Goal) ProtoMessage()    {}
func (*GameEvent_Goal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 2}
}

func (m *GameEvent_Goal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_Goal.Unmarshal(m, b)
}
func (m *GameEvent_Goal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_Goal.Marshal(b, m, deterministic)
}
func (m *GameEvent_Goal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_Goal.Merge(m, src)
}
func (m *GameEvent_Goal) XXX_Size() int {
	return xxx_messageInfo_GameEvent_Goal.Size(m)
}
func (m *GameEvent_Goal) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_Goal.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_Goal proto.InternalMessageInfo

func (m *GameEvent_Goal) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_Goal) GetKickingTeam() Team {
	if m != nil && m.KickingTeam != nil {
		return *m.KickingTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_Goal) GetKickingBot() uint32 {
	if m != nil && m.KickingBot != nil {
		return *m.KickingBot
	}
	return 0
}

func (m *GameEvent_Goal) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_Goal) GetKickLocation() *Location {
	if m != nil {
		return m.KickLocation
	}
	return nil
}

func (m *GameEvent_Goal) GetKickSpeed() float32 {
	if m != nil && m.KickSpeed != nil {
		return *m.KickSpeed
	}
	return 0
}

func (m *GameEvent_Goal) GetMaxBallHeight() float32 {
	if m != nil && m.MaxBallHeight != nil {
		return *m.MaxBallHeight
	}
	return 0
}

// the ball entered the goal directly during an indirect free kick
type GameEvent_IndirectGoal struct {
	// the team that tried to shoot the goal
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that kicked the ball - at least the team must be set
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball entered the goal
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was kicked
	KickLocation         *Location `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_IndirectGoal) Reset()         { *m = GameEvent_IndirectGoal{} }
func (m *GameEvent_IndirectGoal) String() string { return proto.CompactTextString(m) }
func (*GameEvent_IndirectGoal) ProtoMessage()    {}
func (*GameEvent_IndirectGoal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 3}
}

func (m *GameEvent_IndirectGoal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_IndirectGoal.Unmarshal(m, b)
}
func (m *GameEvent_IndirectGoal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_IndirectGoal.Marshal(b, m, deterministic)
}
func (m *GameEvent_IndirectGoal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_IndirectGoal.Merge(m, src)
}
func (m *GameEvent_IndirectGoal) XXX_Size() int {
	return xxx_messageInfo_GameEvent_IndirectGoal.Size(m)
}
func (m *GameEvent_IndirectGoal) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_IndirectGoal.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_IndirectGoal proto.InternalMessageInfo

func (m *GameEvent_IndirectGoal) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_IndirectGoal) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_IndirectGoal) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_IndirectGoal) GetKickLocation() *Location {
	if m != nil {
		return m.KickLocation
	}
	return nil
}

// the ball entered the goal, but was initially chipped
type GameEvent_ChippedGoal struct {
	// the team that tried to shoot the goal
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that kicked the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the ball entered the goal
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location where the ball was kicked
	KickLocation *Location `protobuf:"bytes,4,opt,name=kick_location,json=kickLocation" json:"kick_location,omitempty"`
	// the maximum height [m] of the ball, before it entered the goal and since the last kick
	MaxBallHeight        *float32 `protobuf:"fixed32,5,opt,name=max_ball_height,json=maxBallHeight" json:"max_ball_height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_ChippedGoal) Reset()         { *m = GameEvent_ChippedGoal{} }
func (m *GameEvent_ChippedGoal) String() string { return proto.CompactTextString(m) }
func (*GameEvent_ChippedGoal) ProtoMessage()    {}
func (*GameEvent_ChippedGoal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 4}
}

func (m *GameEvent_ChippedGoal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_ChippedGoal.Unmarshal(m, b)
}
func (m *GameEvent_ChippedGoal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_ChippedGoal.Marshal(b, m, deterministic)
}
func (m *GameEvent_ChippedGoal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_ChippedGoal.Merge(m, src)
}
func (m *GameEvent_ChippedGoal) XXX_Size() int {
	return xxx_messageInfo_GameEvent_ChippedGoal.Size(m)
}
func (m *GameEvent_ChippedGoal) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_ChippedGoal.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_ChippedGoal proto.InternalMessageInfo

func (m *GameEvent_ChippedGoal) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_ChippedGoal) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_ChippedGoal) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_ChippedGoal) GetKickLocation() *Location {
	if m != nil {
		return m.KickLocation
	}
	return nil
}

func (m *GameEvent_ChippedGoal) GetMaxBallHeight() float32 {
	if m != nil && m.MaxBallHeight != nil {
		return *m.MaxBallHeight
	}
	return 0
}

// a bot moved too fast while the game was stopped
type GameEvent_BotTooFastInStop struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that was too fast
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the bot speed [m/s]
	Speed                *float32 `protobuf:"fixed32,4,opt,name=speed" json:"speed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_BotTooFastInStop) Reset()         { *m = GameEvent_BotTooFastInStop{} }
func (m *GameEvent_BotTooFastInStop) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotTooFastInStop) ProtoMessage()    {}
func (*GameEvent_BotTooFastInStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 5}
}

func (m *GameEvent_BotTooFastInStop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotTooFastInStop.Unmarshal(m, b)
}
func (m *GameEvent_BotTooFastInStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotTooFastInStop.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotTooFastInStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotTooFastInStop.Merge(m, src)
}
func (m *GameEvent_BotTooFastInStop) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotTooFastInStop.Size(m)
}
func (m *GameEvent_BotTooFastInStop) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotTooFastInStop.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotTooFastInStop proto.InternalMessageInfo

func (m *GameEvent_BotTooFastInStop) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotTooFastInStop) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_BotTooFastInStop) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_BotTooFastInStop) GetSpeed() float32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

// a bot of the defending team got too close to the kick point during a free kick
type GameEvent_DefenderTooCloseToKickPoint struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that violates the distance to the kick point
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] from bot to the kick point (including the minimum radius)
	Distance             *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_DefenderTooCloseToKickPoint) Reset()         { *m = GameEvent_DefenderTooCloseToKickPoint{} }
func (m *GameEvent_DefenderTooCloseToKickPoint) String() string { return proto.CompactTextString(m) }
func (*GameEvent_DefenderTooCloseToKickPoint) ProtoMessage()    {}
func (*GameEvent_DefenderTooCloseToKickPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 6}
}

func (m *GameEvent_DefenderTooCloseToKickPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_DefenderTooCloseToKickPoint.Unmarshal(m, b)
}
func (m *GameEvent_DefenderTooCloseToKickPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_DefenderTooCloseToKickPoint.Marshal(b, m, deterministic)
}
func (m *GameEvent_DefenderTooCloseToKickPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_DefenderTooCloseToKickPoint.Merge(m, src)
}
func (m *GameEvent_DefenderTooCloseToKickPoint) XXX_Size() int {
	return xxx_messageInfo_GameEvent_DefenderTooCloseToKickPoint.Size(m)
}
func (m *GameEvent_DefenderTooCloseToKickPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_DefenderTooCloseToKickPoint.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_DefenderTooCloseToKickPoint proto.InternalMessageInfo

func (m *GameEvent_DefenderTooCloseToKickPoint) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_DefenderTooCloseToKickPoint) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_DefenderTooCloseToKickPoint) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_DefenderTooCloseToKickPoint) GetDistance() float32 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

// two robots crashed into each other with similar speeds
type GameEvent_BotCrashDrawn struct {
	// the bot of the yellow team
	BotYellow *uint32 `protobuf:"varint,1,opt,name=bot_yellow,json=botYellow" json:"bot_yellow,omitempty"`
	// the bot of the blue team
	BotBlue *uint32 `protobuf:"varint,2,opt,name=bot_blue,json=botBlue" json:"bot_blue,omitempty"`
	// the location of the crash (center between both bots)
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the calculated crash speed [m/s] of the two bots
	CrashSpeed *float32 `protobuf:"fixed32,4,opt,name=crash_speed,json=crashSpeed" json:"crash_speed,omitempty"`
	// the difference [m/s] of the velocity of the two bots
	SpeedDiff *float32 `protobuf:"fixed32,5,opt,name=speed_diff,json=speedDiff" json:"speed_diff,omitempty"`
	// the angle [rad] in the range [0, π] of the bot velocity vectors
	// an angle of 0 rad (  0°) means, the bots barely touched each other
	// an angle of π rad (180°) means, the bots crashed frontal into each other
	CrashAngle           *float32 `protobuf:"fixed32,6,opt,name=crash_angle,json=crashAngle" json:"crash_angle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_BotCrashDrawn) Reset()         { *m = GameEvent_BotCrashDrawn{} }
func (m *GameEvent_BotCrashDrawn) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotCrashDrawn) ProtoMessage()    {}
func (*GameEvent_BotCrashDrawn) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 7}
}

func (m *GameEvent_BotCrashDrawn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotCrashDrawn.Unmarshal(m, b)
}
func (m *GameEvent_BotCrashDrawn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotCrashDrawn.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotCrashDrawn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotCrashDrawn.Merge(m, src)
}
func (m *GameEvent_BotCrashDrawn) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotCrashDrawn.Size(m)
}
func (m *GameEvent_BotCrashDrawn) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotCrashDrawn.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotCrashDrawn proto.InternalMessageInfo

func (m *GameEvent_BotCrashDrawn) GetBotYellow() uint32 {
	if m != nil && m.BotYellow != nil {
		return *m.BotYellow
	}
	return 0
}

func (m *GameEvent_BotCrashDrawn) GetBotBlue() uint32 {
	if m != nil && m.BotBlue != nil {
		return *m.BotBlue
	}
	return 0
}

func (m *GameEvent_BotCrashDrawn) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_BotCrashDrawn) GetCrashSpeed() float32 {
	if m != nil && m.CrashSpeed != nil {
		return *m.CrashSpeed
	}
	return 0
}

func (m *GameEvent_BotCrashDrawn) GetSpeedDiff() float32 {
	if m != nil && m.SpeedDiff != nil {
		return *m.SpeedDiff
	}
	return 0
}

func (m *GameEvent_BotCrashDrawn) GetCrashAngle() float32 {
	if m != nil && m.CrashAngle != nil {
		return *m.CrashAngle
	}
	return 0
}

// two robots crashed into each other and one team was found guilty to due significant speed difference
type GameEvent_BotCrashUnique struct {
	// the team that caused the crash
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that caused the crash
	Violator *uint32 `protobuf:"varint,2,opt,name=violator" json:"violator,omitempty"`
	// the bot of the opposite team that was involved in the crash
	Victim *uint32 `protobuf:"varint,3,opt,name=victim" json:"victim,omitempty"`
	// the location of the crash (center between both bots)
	Location *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	// the calculated crash speed vector [m/s] of the two bots
	CrashSpeed *float32 `protobuf:"fixed32,5,opt,name=crash_speed,json=crashSpeed" json:"crash_speed,omitempty"`
	// the difference [m/s] of the velocity of the two bots
	SpeedDiff *float32 `protobuf:"fixed32,6,opt,name=speed_diff,json=speedDiff" json:"speed_diff,omitempty"`
	// the angle [rad] in the range [0, π] of the bot velocity vectors
	// an angle of 0 rad (  0°) means, the bots barely touched each other
	// an angle of π rad (180°) means, the bots crashed frontal into each other
	CrashAngle           *float32 `protobuf:"fixed32,7,opt,name=crash_angle,json=crashAngle" json:"crash_angle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_BotCrashUnique) Reset()         { *m = GameEvent_BotCrashUnique{} }
func (m *GameEvent_BotCrashUnique) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotCrashUnique) ProtoMessage()    {}
func (*GameEvent_BotCrashUnique) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 8}
}

func (m *GameEvent_BotCrashUnique) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotCrashUnique.Unmarshal(m, b)
}
func (m *GameEvent_BotCrashUnique) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotCrashUnique.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotCrashUnique) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotCrashUnique.Merge(m, src)
}
func (m *GameEvent_BotCrashUnique) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotCrashUnique.Size(m)
}
func (m *GameEvent_BotCrashUnique) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotCrashUnique.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotCrashUnique proto.InternalMessageInfo

func (m *GameEvent_BotCrashUnique) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotCrashUnique) GetViolator() uint32 {
	if m != nil && m.Violator != nil {
		return *m.Violator
	}
	return 0
}

func (m *GameEvent_BotCrashUnique) GetVictim() uint32 {
	if m != nil && m.Victim != nil {
		return *m.Victim
	}
	return 0
}

func (m *GameEvent_BotCrashUnique) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_BotCrashUnique) GetCrashSpeed() float32 {
	if m != nil && m.CrashSpeed != nil {
		return *m.CrashSpeed
	}
	return 0
}

func (m *GameEvent_BotCrashUnique) GetSpeedDiff() float32 {
	if m != nil && m.SpeedDiff != nil {
		return *m.SpeedDiff
	}
	return 0
}

func (m *GameEvent_BotCrashUnique) GetCrashAngle() float32 {
	if m != nil && m.CrashAngle != nil {
		return *m.CrashAngle
	}
	return 0
}

// a bot pushed another bot over a significant distance
type GameEvent_BotPushedBot struct {
	// the team that pushed the other team
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that pushed the other bot
	Violator *uint32 `protobuf:"varint,2,opt,name=violator" json:"violator,omitempty"`
	// the bot of the opposite team that was pushed
	Victim *uint32 `protobuf:"varint,3,opt,name=victim" json:"victim,omitempty"`
	// the location of the push (center between both bots)
	Location *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	// the pushed distance [m]
	PushedDistance       *float32 `protobuf:"fixed32,5,opt,name=pushed_distance,json=pushedDistance" json:"pushed_distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_BotPushedBot) Reset()         { *m = GameEvent_BotPushedBot{} }
func (m *GameEvent_BotPushedBot) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotPushedBot) ProtoMessage()    {}
func (*GameEvent_BotPushedBot) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 9}
}

func (m *GameEvent_BotPushedBot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotPushedBot.Unmarshal(m, b)
}
func (m *GameEvent_BotPushedBot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotPushedBot.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotPushedBot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotPushedBot.Merge(m, src)
}
func (m *GameEvent_BotPushedBot) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotPushedBot.Size(m)
}
func (m *GameEvent_BotPushedBot) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotPushedBot.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotPushedBot proto.InternalMessageInfo

func (m *GameEvent_BotPushedBot) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotPushedBot) GetViolator() uint32 {
	if m != nil && m.Violator != nil {
		return *m.Violator
	}
	return 0
}

func (m *GameEvent_BotPushedBot) GetVictim() uint32 {
	if m != nil && m.Victim != nil {
		return *m.Victim
	}
	return 0
}

func (m *GameEvent_BotPushedBot) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_BotPushedBot) GetPushedDistance() float32 {
	if m != nil && m.PushedDistance != nil {
		return *m.PushedDistance
	}
	return 0
}

// a bot tipped over
type GameEvent_BotTippedOver struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that tipped over
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the location of the ball at the moment when this foul occurred
	BallLocation         *Location `protobuf:"bytes,4,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_BotTippedOver) Reset()         { *m = GameEvent_BotTippedOver{} }
func (m *GameEvent_BotTippedOver) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotTippedOver) ProtoMessage()    {}
func (*GameEvent_BotTippedOver) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 10}
}

func (m *GameEvent_BotTippedOver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotTippedOver.Unmarshal(m, b)
}
func (m *GameEvent_BotTippedOver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotTippedOver.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotTippedOver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotTippedOver.Merge(m, src)
}
func (m *GameEvent_BotTippedOver) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotTippedOver.Size(m)
}
func (m *GameEvent_BotTippedOver) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotTippedOver.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotTippedOver proto.InternalMessageInfo

func (m *GameEvent_BotTippedOver) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotTippedOver) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_BotTippedOver) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_BotTippedOver) GetBallLocation() *Location {
	if m != nil {
		return m.BallLocation
	}
	return nil
}

// a defender other than the keeper was fully located inside its own defense and touched the ball
type GameEvent_DefenderInDefenseArea struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is inside the penalty area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] from bot case to the nearest point outside the defense area
	Distance             *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_DefenderInDefenseArea) Reset()         { *m = GameEvent_DefenderInDefenseArea{} }
func (m *GameEvent_DefenderInDefenseArea) String() string { return proto.CompactTextString(m) }
func (*GameEvent_DefenderInDefenseArea) ProtoMessage()    {}
func (*GameEvent_DefenderInDefenseArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 11}
}

func (m *GameEvent_DefenderInDefenseArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_DefenderInDefenseArea.Unmarshal(m, b)
}
func (m *GameEvent_DefenderInDefenseArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_DefenderInDefenseArea.Marshal(b, m, deterministic)
}
func (m *GameEvent_DefenderInDefenseArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_DefenderInDefenseArea.Merge(m, src)
}
func (m *GameEvent_DefenderInDefenseArea) XXX_Size() int {
	return xxx_messageInfo_GameEvent_DefenderInDefenseArea.Size(m)
}
func (m *GameEvent_DefenderInDefenseArea) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_DefenderInDefenseArea.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_DefenderInDefenseArea proto.InternalMessageInfo

func (m *GameEvent_DefenderInDefenseArea) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_DefenderInDefenseArea) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_DefenderInDefenseArea) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_DefenderInDefenseArea) GetDistance() float32 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

// a defender other than the keeper was partially located inside its own defense area and touched the ball
type GameEvent_DefenderInDefenseAreaPartially struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is partially inside the penalty area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] that the bot is inside the penalty area
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	// the location of the ball at the moment when this foul occurred
	BallLocation         *Location `protobuf:"bytes,5,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_DefenderInDefenseAreaPartially) Reset() {
	*m = GameEvent_DefenderInDefenseAreaPartially{}
}
func (m *GameEvent_DefenderInDefenseAreaPartially) String() string { return proto.CompactTextString(m) }
func (*GameEvent_DefenderInDefenseAreaPartially) ProtoMessage()    {}
func (*GameEvent_DefenderInDefenseAreaPartially) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 12}
}

func (m *GameEvent_DefenderInDefenseAreaPartially) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_DefenderInDefenseAreaPartially.Unmarshal(m, b)
}
func (m *GameEvent_DefenderInDefenseAreaPartially) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_DefenderInDefenseAreaPartially.Marshal(b, m, deterministic)
}
func (m *GameEvent_DefenderInDefenseAreaPartially) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_DefenderInDefenseAreaPartially.Merge(m, src)
}
func (m *GameEvent_DefenderInDefenseAreaPartially) XXX_Size() int {
	return xxx_messageInfo_GameEvent_DefenderInDefenseAreaPartially.Size(m)
}
func (m *GameEvent_DefenderInDefenseAreaPartially) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_DefenderInDefenseAreaPartially.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_DefenderInDefenseAreaPartially proto.InternalMessageInfo

func (m *GameEvent_DefenderInDefenseAreaPartially) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_DefenderInDefenseAreaPartially) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_DefenderInDefenseAreaPartially) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_DefenderInDefenseAreaPartially) GetDistance() float32 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

func (m *GameEvent_DefenderInDefenseAreaPartially) GetBallLocation() *Location {
	if m != nil {
		return m.BallLocation
	}
	return nil
}

// an attacker touched the ball inside the opponent defense area
type GameEvent_AttackerTouchedBallInDefenseArea struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is inside the penalty area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] that the bot is inside the penalty area
	Distance             *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_AttackerTouchedBallInDefenseArea) Reset() {
	*m = GameEvent_AttackerTouchedBallInDefenseArea{}
}
func (m *GameEvent_AttackerTouchedBallInDefenseArea) String() string {
	return proto.CompactTextString(m)
}
func (*GameEvent_AttackerTouchedBallInDefenseArea) ProtoMessage() {}
func (*GameEvent_AttackerTouchedBallInDefenseArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 13}
}

func (m *GameEvent_AttackerTouchedBallInDefenseArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_AttackerTouchedBallInDefenseArea.Unmarshal(m, b)
}
func (m *GameEvent_AttackerTouchedBallInDefenseArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_AttackerTouchedBallInDefenseArea.Marshal(b, m, deterministic)
}
func (m *GameEvent_AttackerTouchedBallInDefenseArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_AttackerTouchedBallInDefenseArea.Merge(m, src)
}
func (m *GameEvent_AttackerTouchedBallInDefenseArea) XXX_Size() int {
	return xxx_messageInfo_GameEvent_AttackerTouchedBallInDefenseArea.Size(m)
}
func (m *GameEvent_AttackerTouchedBallInDefenseArea) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_AttackerTouchedBallInDefenseArea.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_AttackerTouchedBallInDefenseArea proto.InternalMessageInfo

func (m *GameEvent_AttackerTouchedBallInDefenseArea) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_AttackerTouchedBallInDefenseArea) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_AttackerTouchedBallInDefenseArea) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_AttackerTouchedBallInDefenseArea) GetDistance() float32 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

// a bot kicked the ball too fast
type GameEvent_BotKickedBallTooFast struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that kicked too fast
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the ball at the time of the highest speed
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the absolute initial ball speed (kick speed) [m/s]
	InitialBallSpeed *float32 `protobuf:"fixed32,4,opt,name=initial_ball_speed,json=initialBallSpeed" json:"initial_ball_speed,omitempty"`
	// was the ball chipped?
	Chipped              *bool    `protobuf:"varint,5,opt,name=chipped" json:"chipped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_BotKickedBallTooFast) Reset()         { *m = GameEvent_BotKickedBallTooFast{} }
func (m *GameEvent_BotKickedBallTooFast) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotKickedBallTooFast) ProtoMessage()    {}
func (*GameEvent_BotKickedBallTooFast) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 14}
}

func (m *GameEvent_BotKickedBallTooFast) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotKickedBallTooFast.Unmarshal(m, b)
}
func (m *GameEvent_BotKickedBallTooFast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotKickedBallTooFast.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotKickedBallTooFast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotKickedBallTooFast.Merge(m, src)
}
func (m *GameEvent_BotKickedBallTooFast) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotKickedBallTooFast.Size(m)
}
func (m *GameEvent_BotKickedBallTooFast) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotKickedBallTooFast.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotKickedBallTooFast proto.InternalMessageInfo

func (m *GameEvent_BotKickedBallTooFast) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotKickedBallTooFast) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_BotKickedBallTooFast) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_BotKickedBallTooFast) GetInitialBallSpeed() float32 {
	if m != nil && m.InitialBallSpeed != nil {
		return *m.InitialBallSpeed
	}
	return 0
}

func (m *GameEvent_BotKickedBallTooFast) GetChipped() bool {
	if m != nil && m.Chipped != nil {
		return *m.Chipped
	}
	return false
}

// a bot dribbled to ball too far
type GameEvent_BotDribbledBallTooFar struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that dribbled too far
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location where the dribbling started
	Start *Location `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// the location where the maximum dribbling distance was reached
	End                  *Location `protobuf:"bytes,4,opt,name=end" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_BotDribbledBallTooFar) Reset()         { *m = GameEvent_BotDribbledBallTooFar{} }
func (m *GameEvent_BotDribbledBallTooFar) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotDribbledBallTooFar) ProtoMessage()    {}
func (*GameEvent_BotDribbledBallTooFar) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 15}
}

func (m *GameEvent_BotDribbledBallTooFar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotDribbledBallTooFar.Unmarshal(m, b)
}
func (m *GameEvent_BotDribbledBallTooFar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotDribbledBallTooFar.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotDribbledBallTooFar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotDribbledBallTooFar.Merge(m, src)
}
func (m *GameEvent_BotDribbledBallTooFar) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotDribbledBallTooFar.Size(m)
}
func (m *GameEvent_BotDribbledBallTooFar) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotDribbledBallTooFar.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotDribbledBallTooFar proto.InternalMessageInfo

func (m *GameEvent_BotDribbledBallTooFar) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotDribbledBallTooFar) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_BotDribbledBallTooFar) GetStart() *Location {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *GameEvent_BotDribbledBallTooFar) GetEnd() *Location {
	if m != nil {
		return m.End
	}
	return nil
}

// an attacker touched the opponent robot inside defense area
type GameEvent_AttackerTouchedOpponentInDefenseArea struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that touched the opponent robot
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the bot of the opposite team that was touched
	Victim *uint32 `protobuf:"varint,4,opt,name=victim" json:"victim,omitempty"`
	// the location of the contact point between both bots
	Location             *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) Reset() {
	*m = GameEvent_AttackerTouchedOpponentInDefenseArea{}
}
func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) String() string {
	return proto.CompactTextString(m)
}
func (*GameEvent_AttackerTouchedOpponentInDefenseArea) ProtoMessage() {}
func (*GameEvent_AttackerTouchedOpponentInDefenseArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 16}
}

func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_AttackerTouchedOpponentInDefenseArea.Unmarshal(m, b)
}
func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_AttackerTouchedOpponentInDefenseArea.Marshal(b, m, deterministic)
}
func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_AttackerTouchedOpponentInDefenseArea.Merge(m, src)
}
func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) XXX_Size() int {
	return xxx_messageInfo_GameEvent_AttackerTouchedOpponentInDefenseArea.Size(m)
}
func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_AttackerTouchedOpponentInDefenseArea.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_AttackerTouchedOpponentInDefenseArea proto.InternalMessageInfo

func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) GetVictim() uint32 {
	if m != nil && m.Victim != nil {
		return *m.Victim
	}
	return 0
}

func (m *GameEvent_AttackerTouchedOpponentInDefenseArea) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// an attacker touched the ball multiple times when it was not allowed to
type GameEvent_AttackerDoubleTouchedBall struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that touched the ball twice
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the ball when it was first touched
	Location             *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_AttackerDoubleTouchedBall) Reset()         { *m = GameEvent_AttackerDoubleTouchedBall{} }
func (m *GameEvent_AttackerDoubleTouchedBall) String() string { return proto.CompactTextString(m) }
func (*GameEvent_AttackerDoubleTouchedBall) ProtoMessage()    {}
func (*GameEvent_AttackerDoubleTouchedBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 17}
}

func (m *GameEvent_AttackerDoubleTouchedBall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_AttackerDoubleTouchedBall.Unmarshal(m, b)
}
func (m *GameEvent_AttackerDoubleTouchedBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_AttackerDoubleTouchedBall.Marshal(b, m, deterministic)
}
func (m *GameEvent_AttackerDoubleTouchedBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_AttackerDoubleTouchedBall.Merge(m, src)
}
func (m *GameEvent_AttackerDoubleTouchedBall) XXX_Size() int {
	return xxx_messageInfo_GameEvent_AttackerDoubleTouchedBall.Size(m)
}
func (m *GameEvent_AttackerDoubleTouchedBall) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_AttackerDoubleTouchedBall.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_AttackerDoubleTouchedBall proto.InternalMessageInfo

func (m *GameEvent_AttackerDoubleTouchedBall) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_AttackerDoubleTouchedBall) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_AttackerDoubleTouchedBall) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// an attacker was located too near to the opponent defense area during stop or free kick
type GameEvent_AttackerTooCloseToDefenseArea struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that is too close to the defense area
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the distance [m] of the bot to the penalty area
	Distance *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	// the location of the ball at the moment when this foul occurred
	BallLocation         *Location `protobuf:"bytes,5,opt,name=ball_location,json=ballLocation" json:"ball_location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_AttackerTooCloseToDefenseArea) Reset() {
	*m = GameEvent_AttackerTooCloseToDefenseArea{}
}
func (m *GameEvent_AttackerTooCloseToDefenseArea) String() string { return proto.CompactTextString(m) }
func (*GameEvent_AttackerTooCloseToDefenseArea) ProtoMessage()    {}
func (*GameEvent_AttackerTooCloseToDefenseArea) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 18}
}

func (m *GameEvent_AttackerTooCloseToDefenseArea) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_AttackerTooCloseToDefenseArea.Unmarshal(m, b)
}
func (m *GameEvent_AttackerTooCloseToDefenseArea) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_AttackerTooCloseToDefenseArea.Marshal(b, m, deterministic)
}
func (m *GameEvent_AttackerTooCloseToDefenseArea) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_AttackerTooCloseToDefenseArea.Merge(m, src)
}
func (m *GameEvent_AttackerTooCloseToDefenseArea) XXX_Size() int {
	return xxx_messageInfo_GameEvent_AttackerTooCloseToDefenseArea.Size(m)
}
func (m *GameEvent_AttackerTooCloseToDefenseArea) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_AttackerTooCloseToDefenseArea.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_AttackerTooCloseToDefenseArea proto.InternalMessageInfo

func (m *GameEvent_AttackerTooCloseToDefenseArea) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_AttackerTooCloseToDefenseArea) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_AttackerTooCloseToDefenseArea) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_AttackerTooCloseToDefenseArea) GetDistance() float32 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

func (m *GameEvent_AttackerTooCloseToDefenseArea) GetBallLocation() *Location {
	if m != nil {
		return m.BallLocation
	}
	return nil
}

// a bot held the ball for too long
type GameEvent_BotHeldBallDeliberately struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that holds the ball
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the ball
	Location *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// the duration [s] that the bot hold the ball
	Duration             *float32 `protobuf:"fixed32,4,opt,name=duration" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_BotHeldBallDeliberately) Reset()         { *m = GameEvent_BotHeldBallDeliberately{} }
func (m *GameEvent_BotHeldBallDeliberately) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotHeldBallDeliberately) ProtoMessage()    {}
func (*GameEvent_BotHeldBallDeliberately) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 19}
}

func (m *GameEvent_BotHeldBallDeliberately) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotHeldBallDeliberately.Unmarshal(m, b)
}
func (m *GameEvent_BotHeldBallDeliberately) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotHeldBallDeliberately.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotHeldBallDeliberately) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotHeldBallDeliberately.Merge(m, src)
}
func (m *GameEvent_BotHeldBallDeliberately) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotHeldBallDeliberately.Size(m)
}
func (m *GameEvent_BotHeldBallDeliberately) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotHeldBallDeliberately.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotHeldBallDeliberately proto.InternalMessageInfo

func (m *GameEvent_BotHeldBallDeliberately) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotHeldBallDeliberately) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_BotHeldBallDeliberately) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_BotHeldBallDeliberately) GetDuration() float32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

// a bot interfered the ball placement of the other team
type GameEvent_BotInterferedPlacement struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the bot that interfered the placement
	ByBot *uint32 `protobuf:"varint,2,opt,name=by_bot,json=byBot" json:"by_bot,omitempty"`
	// the location of the bot
	Location             *Location `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_BotInterferedPlacement) Reset()         { *m = GameEvent_BotInterferedPlacement{} }
func (m *GameEvent_BotInterferedPlacement) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotInterferedPlacement) ProtoMessage()    {}
func (*GameEvent_BotInterferedPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 20}
}

func (m *GameEvent_BotInterferedPlacement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotInterferedPlacement.Unmarshal(m, b)
}
func (m *GameEvent_BotInterferedPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotInterferedPlacement.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotInterferedPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotInterferedPlacement.Merge(m, src)
}
func (m *GameEvent_BotInterferedPlacement) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotInterferedPlacement.Size(m)
}
func (m *GameEvent_BotInterferedPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotInterferedPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotInterferedPlacement proto.InternalMessageInfo

func (m *GameEvent_BotInterferedPlacement) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BotInterferedPlacement) GetByBot() uint32 {
	if m != nil && m.ByBot != nil {
		return *m.ByBot
	}
	return 0
}

func (m *GameEvent_BotInterferedPlacement) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

// a team collected multiple cards (yellow and red), which results in a penalty kick
type GameEvent_MultipleCards struct {
	// the team that received multiple yellow cards
	ByTeam               *Team    `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_MultipleCards) Reset()         { *m = GameEvent_MultipleCards{} }
func (m *GameEvent_MultipleCards) String() string { return proto.CompactTextString(m) }
func (*GameEvent_MultipleCards) ProtoMessage()    {}
func (*GameEvent_MultipleCards) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 21}
}

func (m *GameEvent_MultipleCards) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_MultipleCards.Unmarshal(m, b)
}
func (m *GameEvent_MultipleCards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_MultipleCards.Marshal(b, m, deterministic)
}
func (m *GameEvent_MultipleCards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_MultipleCards.Merge(m, src)
}
func (m *GameEvent_MultipleCards) XXX_Size() int {
	return xxx_messageInfo_GameEvent_MultipleCards.Size(m)
}
func (m *GameEvent_MultipleCards) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_MultipleCards.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_MultipleCards proto.InternalMessageInfo

func (m *GameEvent_MultipleCards) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

// a team collected multiple fouls, which results in a yellow card
type GameEvent_MultipleFouls struct {
	// the team that collected multiple fouls
	ByTeam               *Team    `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_MultipleFouls) Reset()         { *m = GameEvent_MultipleFouls{} }
func (m *GameEvent_MultipleFouls) String() string { return proto.CompactTextString(m) }
func (*GameEvent_MultipleFouls) ProtoMessage()    {}
func (*GameEvent_MultipleFouls) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 22}
}

func (m *GameEvent_MultipleFouls) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_MultipleFouls.Unmarshal(m, b)
}
func (m *GameEvent_MultipleFouls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_MultipleFouls.Marshal(b, m, deterministic)
}
func (m *GameEvent_MultipleFouls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_MultipleFouls.Merge(m, src)
}
func (m *GameEvent_MultipleFouls) XXX_Size() int {
	return xxx_messageInfo_GameEvent_MultipleFouls.Size(m)
}
func (m *GameEvent_MultipleFouls) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_MultipleFouls.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_MultipleFouls proto.InternalMessageInfo

func (m *GameEvent_MultipleFouls) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

// a team failed to place the ball multiple times in a row
type GameEvent_MultiplePlacementFailures struct {
	// the team that failed multiple times
	ByTeam               *Team    `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_MultiplePlacementFailures) Reset()         { *m = GameEvent_MultiplePlacementFailures{} }
func (m *GameEvent_MultiplePlacementFailures) String() string { return proto.CompactTextString(m) }
func (*GameEvent_MultiplePlacementFailures) ProtoMessage()    {}
func (*GameEvent_MultiplePlacementFailures) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 23}
}

func (m *GameEvent_MultiplePlacementFailures) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_MultiplePlacementFailures.Unmarshal(m, b)
}
func (m *GameEvent_MultiplePlacementFailures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_MultiplePlacementFailures.Marshal(b, m, deterministic)
}
func (m *GameEvent_MultiplePlacementFailures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_MultiplePlacementFailures.Merge(m, src)
}
func (m *GameEvent_MultiplePlacementFailures) XXX_Size() int {
	return xxx_messageInfo_GameEvent_MultiplePlacementFailures.Size(m)
}
func (m *GameEvent_MultiplePlacementFailures) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_MultiplePlacementFailures.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_MultiplePlacementFailures proto.InternalMessageInfo

func (m *GameEvent_MultiplePlacementFailures) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

// timeout waiting for the attacking team to perform the free kick
type GameEvent_KickTimeout struct {
	// the team that that should have kicked
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the location of the ball
	Location *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	// the time [s] that was waited
	Time                 *float32 `protobuf:"fixed32,3,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_KickTimeout) Reset()         { *m = GameEvent_KickTimeout{} }
func (m *GameEvent_KickTimeout) String() string { return proto.CompactTextString(m) }
func (*GameEvent_KickTimeout) ProtoMessage()    {}
func (*GameEvent_KickTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 24}
}

func (m *GameEvent_KickTimeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_KickTimeout.Unmarshal(m, b)
}
func (m *GameEvent_KickTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_KickTimeout.Marshal(b, m, deterministic)
}
func (m *GameEvent_KickTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_KickTimeout.Merge(m, src)
}
func (m *GameEvent_KickTimeout) XXX_Size() int {
	return xxx_messageInfo_GameEvent_KickTimeout.Size(m)
}
func (m *GameEvent_KickTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_KickTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_KickTimeout proto.InternalMessageInfo

func (m *GameEvent_KickTimeout) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_KickTimeout) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_KickTimeout) GetTime() float32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// game was stuck
type GameEvent_NoProgressInGame struct {
	// the location of the ball
	Location *Location `protobuf:"bytes,1,opt,name=location" json:"location,omitempty"`
	// the time [s] that was waited
	Time                 *float32 `protobuf:"fixed32,2,opt,name=time" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_NoProgressInGame) Reset()         { *m = GameEvent_NoProgressInGame{} }
func (m *GameEvent_NoProgressInGame) String() string { return proto.CompactTextString(m) }
func (*GameEvent_NoProgressInGame) ProtoMessage()    {}
func (*GameEvent_NoProgressInGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 25}
}

func (m *GameEvent_NoProgressInGame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_NoProgressInGame.Unmarshal(m, b)
}
func (m *GameEvent_NoProgressInGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_NoProgressInGame.Marshal(b, m, deterministic)
}
func (m *GameEvent_NoProgressInGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_NoProgressInGame.Merge(m, src)
}
func (m *GameEvent_NoProgressInGame) XXX_Size() int {
	return xxx_messageInfo_GameEvent_NoProgressInGame.Size(m)
}
func (m *GameEvent_NoProgressInGame) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_NoProgressInGame.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_NoProgressInGame proto.InternalMessageInfo

func (m *GameEvent_NoProgressInGame) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_NoProgressInGame) GetTime() float32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// ball placement failed
type GameEvent_PlacementFailed struct {
	// the team that failed
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the remaining distance [m] from ball to placement position
	RemainingDistance    *float32 `protobuf:"fixed32,2,opt,name=remaining_distance,json=remainingDistance" json:"remaining_distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_PlacementFailed) Reset()         { *m = GameEvent_PlacementFailed{} }
func (m *GameEvent_PlacementFailed) String() string { return proto.CompactTextString(m) }
func (*GameEvent_PlacementFailed) ProtoMessage()    {}
func (*GameEvent_PlacementFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 26}
}

func (m *GameEvent_PlacementFailed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_PlacementFailed.Unmarshal(m, b)
}
func (m *GameEvent_PlacementFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_PlacementFailed.Marshal(b, m, deterministic)
}
func (m *GameEvent_PlacementFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_PlacementFailed.Merge(m, src)
}
func (m *GameEvent_PlacementFailed) XXX_Size() int {
	return xxx_messageInfo_GameEvent_PlacementFailed.Size(m)
}
func (m *GameEvent_PlacementFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_PlacementFailed.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_PlacementFailed proto.InternalMessageInfo

func (m *GameEvent_PlacementFailed) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_PlacementFailed) GetRemainingDistance() float32 {
	if m != nil && m.RemainingDistance != nil {
		return *m.RemainingDistance
	}
	return 0
}

// a team was found guilty for minor unsporting behavior
type GameEvent_UnsportingBehaviorMinor struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// an explanation of the situation and decision
	Reason               *string  `protobuf:"bytes,2,req,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_UnsportingBehaviorMinor) Reset()         { *m = GameEvent_UnsportingBehaviorMinor{} }
func (m *GameEvent_UnsportingBehaviorMinor) String() string { return proto.CompactTextString(m) }
func (*GameEvent_UnsportingBehaviorMinor) ProtoMessage()    {}
func (*GameEvent_UnsportingBehaviorMinor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 27}
}

func (m *GameEvent_UnsportingBehaviorMinor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_UnsportingBehaviorMinor.Unmarshal(m, b)
}
func (m *GameEvent_UnsportingBehaviorMinor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_UnsportingBehaviorMinor.Marshal(b, m, deterministic)
}
func (m *GameEvent_UnsportingBehaviorMinor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_UnsportingBehaviorMinor.Merge(m, src)
}
func (m *GameEvent_UnsportingBehaviorMinor) XXX_Size() int {
	return xxx_messageInfo_GameEvent_UnsportingBehaviorMinor.Size(m)
}
func (m *GameEvent_UnsportingBehaviorMinor) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_UnsportingBehaviorMinor.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_UnsportingBehaviorMinor proto.InternalMessageInfo

func (m *GameEvent_UnsportingBehaviorMinor) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_UnsportingBehaviorMinor) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

// a team was found guilty for major unsporting behavior
type GameEvent_UnsportingBehaviorMajor struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// an explanation of the situation and decision
	Reason               *string  `protobuf:"bytes,2,req,name=reason" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_UnsportingBehaviorMajor) Reset()         { *m = GameEvent_UnsportingBehaviorMajor{} }
func (m *GameEvent_UnsportingBehaviorMajor) String() string { return proto.CompactTextString(m) }
func (*GameEvent_UnsportingBehaviorMajor) ProtoMessage()    {}
func (*GameEvent_UnsportingBehaviorMajor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 28}
}

func (m *GameEvent_UnsportingBehaviorMajor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_UnsportingBehaviorMajor.Unmarshal(m, b)
}
func (m *GameEvent_UnsportingBehaviorMajor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_UnsportingBehaviorMajor.Marshal(b, m, deterministic)
}
func (m *GameEvent_UnsportingBehaviorMajor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_UnsportingBehaviorMajor.Merge(m, src)
}
func (m *GameEvent_UnsportingBehaviorMajor) XXX_Size() int {
	return xxx_messageInfo_GameEvent_UnsportingBehaviorMajor.Size(m)
}
func (m *GameEvent_UnsportingBehaviorMajor) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_UnsportingBehaviorMajor.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_UnsportingBehaviorMajor proto.InternalMessageInfo

func (m *GameEvent_UnsportingBehaviorMajor) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_UnsportingBehaviorMajor) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

// a keeper held the ball in its defense area for too long
type GameEvent_KeeperHeldBall struct {
	// the team that found guilty
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the location of the ball
	Location *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	// the duration [s] that the keeper hold the ball
	Duration             *float32 `protobuf:"fixed32,3,opt,name=duration" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_KeeperHeldBall) Reset()         { *m = GameEvent_KeeperHeldBall{} }
func (m *GameEvent_KeeperHeldBall) String() string { return proto.CompactTextString(m) }
func (*GameEvent_KeeperHeldBall) ProtoMessage()    {}
func (*GameEvent_KeeperHeldBall) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 29}
}

func (m *GameEvent_KeeperHeldBall) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_KeeperHeldBall.Unmarshal(m, b)
}
func (m *GameEvent_KeeperHeldBall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_KeeperHeldBall.Marshal(b, m, deterministic)
}
func (m *GameEvent_KeeperHeldBall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_KeeperHeldBall.Merge(m, src)
}
func (m *GameEvent_KeeperHeldBall) XXX_Size() int {
	return xxx_messageInfo_GameEvent_KeeperHeldBall.Size(m)
}
func (m *GameEvent_KeeperHeldBall) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_KeeperHeldBall.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_KeeperHeldBall proto.InternalMessageInfo

func (m *GameEvent_KeeperHeldBall) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_KeeperHeldBall) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GameEvent_KeeperHeldBall) GetDuration() float32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

// a team successfully placed the ball
type GameEvent_PlacementSucceeded struct {
	// the team that did the placement
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the time [s] taken for placing the ball
	TimeTaken *float32 `protobuf:"fixed32,2,opt,name=time_taken,json=timeTaken" json:"time_taken,omitempty"`
	// the distance [m] between placement location and actual ball position
	Precision *float32 `protobuf:"fixed32,3,opt,name=precision" json:"precision,omitempty"`
	// the distance [m] between the initial ball location and the placement position
	Distance             *float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_PlacementSucceeded) Reset()         { *m = GameEvent_PlacementSucceeded{} }
func (m *GameEvent_PlacementSucceeded) String() string { return proto.CompactTextString(m) }
func (*GameEvent_PlacementSucceeded) ProtoMessage()    {}
func (*GameEvent_PlacementSucceeded) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 30}
}

func (m *GameEvent_PlacementSucceeded) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_PlacementSucceeded.Unmarshal(m, b)
}
func (m *GameEvent_PlacementSucceeded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_PlacementSucceeded.Marshal(b, m, deterministic)
}
func (m *GameEvent_PlacementSucceeded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_PlacementSucceeded.Merge(m, src)
}
func (m *GameEvent_PlacementSucceeded) XXX_Size() int {
	return xxx_messageInfo_GameEvent_PlacementSucceeded.Size(m)
}
func (m *GameEvent_PlacementSucceeded) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_PlacementSucceeded.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_PlacementSucceeded proto.InternalMessageInfo

func (m *GameEvent_PlacementSucceeded) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_PlacementSucceeded) GetTimeTaken() float32 {
	if m != nil && m.TimeTaken != nil {
		return *m.TimeTaken
	}
	return 0
}

func (m *GameEvent_PlacementSucceeded) GetPrecision() float32 {
	if m != nil && m.Precision != nil {
		return *m.Precision
	}
	return 0
}

func (m *GameEvent_PlacementSucceeded) GetDistance() float32 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

// both teams are prepared - all conditions are met to continue (with kickoff or penalty kick)
type GameEvent_Prepared struct {
	// the time [s] taken for preparing
	TimeTaken            *float32 `protobuf:"fixed32,1,opt,name=time_taken,json=timeTaken" json:"time_taken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_Prepared) Reset()         { *m = GameEvent_Prepared{} }
func (m *GameEvent_Prepared) String() string { return proto.CompactTextString(m) }
func (*GameEvent_Prepared) ProtoMessage()    {}
func (*GameEvent_Prepared) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 31}
}

func (m *GameEvent_Prepared) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_Prepared.Unmarshal(m, b)
}
func (m *GameEvent_Prepared) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_Prepared.Marshal(b, m, deterministic)
}
func (m *GameEvent_Prepared) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_Prepared.Merge(m, src)
}
func (m *GameEvent_Prepared) XXX_Size() int {
	return xxx_messageInfo_GameEvent_Prepared.Size(m)
}
func (m *GameEvent_Prepared) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_Prepared.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_Prepared proto.InternalMessageInfo

func (m *GameEvent_Prepared) GetTimeTaken() float32 {
	if m != nil && m.TimeTaken != nil {
		return *m.TimeTaken
	}
	return 0
}

// bots are being substituted by at least one team
type GameEvent_BotSubstitution struct {
	// the team that substitutes robots
	ByTeam               *Team    `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_BotSubstitution) Reset()         { *m = GameEvent_BotSubstitution{} }
func (m *GameEvent_BotSubstitution) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BotSubstitution) ProtoMessage()    {}
func (*GameEvent_BotSubstitution) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 32}
}

func (m *GameEvent_BotSubstitution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BotSubstitution.Unmarshal(m, b)
}
func (m *GameEvent_BotSubstitution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BotSubstitution.Marshal(b, m, deterministic)
}
func (m *GameEvent_BotSubstitution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BotSubstitution.Merge(m, src)
}
func (m *GameEvent_BotSubstitution) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BotSubstitution.Size(m)
}
func (m *GameEvent_BotSubstitution) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BotSubstitution.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BotSubstitution proto.InternalMessageInfo

func (m *GameEvent_BotSubstitution) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

// a team has too many robots on the field
type GameEvent_TooManyRobots struct {
	// the team that has too many robots
	ByTeam               *Team    `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameEvent_TooManyRobots) Reset()         { *m = GameEvent_TooManyRobots{} }
func (m *GameEvent_TooManyRobots) String() string { return proto.CompactTextString(m) }
func (*GameEvent_TooManyRobots) ProtoMessage()    {}
func (*GameEvent_TooManyRobots) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 33}
}

func (m *GameEvent_TooManyRobots) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_TooManyRobots.Unmarshal(m, b)
}
func (m *GameEvent_TooManyRobots) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_TooManyRobots.Marshal(b, m, deterministic)
}
func (m *GameEvent_TooManyRobots) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_TooManyRobots.Merge(m, src)
}
func (m *GameEvent_TooManyRobots) XXX_Size() int {
	return xxx_messageInfo_GameEvent_TooManyRobots.Size(m)
}
func (m *GameEvent_TooManyRobots) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_TooManyRobots.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_TooManyRobots proto.InternalMessageInfo

func (m *GameEvent_TooManyRobots) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

// a robot chipped the ball over the field boundary out of the playing surface
type GameEvent_BoundaryCrossing struct {
	// the team that has too many robots
	ByTeam *Team `protobuf:"varint,1,req,name=by_team,json=byTeam,enum=Team" json:"by_team,omitempty"`
	// the location of the ball
	Location             *Location `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GameEvent_BoundaryCrossing) Reset()         { *m = GameEvent_BoundaryCrossing{} }
func (m *GameEvent_BoundaryCrossing) String() string { return proto.CompactTextString(m) }
func (*GameEvent_BoundaryCrossing) ProtoMessage()    {}
func (*GameEvent_BoundaryCrossing) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d7737834ddab500, []int{2, 34}
}

func (m *GameEvent_BoundaryCrossing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameEvent_BoundaryCrossing.Unmarshal(m, b)
}
func (m *GameEvent_BoundaryCrossing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameEvent_BoundaryCrossing.Marshal(b, m, deterministic)
}
func (m *GameEvent_BoundaryCrossing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameEvent_BoundaryCrossing.Merge(m, src)
}
func (m *GameEvent_BoundaryCrossing) XXX_Size() int {
	return xxx_messageInfo_GameEvent_BoundaryCrossing.Size(m)
}
func (m *GameEvent_BoundaryCrossing) XXX_DiscardUnknown() {
	xxx_messageInfo_GameEvent_BoundaryCrossing.DiscardUnknown(m)
}

var xxx_messageInfo_GameEvent_BoundaryCrossing proto.InternalMessageInfo

func (m *GameEvent_BoundaryCrossing) GetByTeam() Team {
	if m != nil && m.ByTeam != nil {
		return *m.ByTeam
	}
	return Team_UNKNOWN
}

func (m *GameEvent_BoundaryCrossing) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func init() {
	proto.RegisterEnum("Team", Team_name, Team_value)
	proto.RegisterEnum("GameEvent_Type", GameEvent_Type_name, GameEvent_Type_value)
	proto.RegisterType((*BotId)(nil), "BotId")
	proto.RegisterType((*Location)(nil), "Location")
	proto.RegisterType((*GameEvent)(nil), "GameEvent")
	proto.RegisterType((*GameEvent_BallLeftField)(nil), "GameEvent.BallLeftField")
	proto.RegisterType((*GameEvent_AimlessKick)(nil), "GameEvent.AimlessKick")
	proto.RegisterType((*GameEvent_Goal)(nil), "GameEvent.Goal")
	proto.RegisterType((*GameEvent_IndirectGoal)(nil), "GameEvent.IndirectGoal")
	proto.RegisterType((*GameEvent_ChippedGoal)(nil), "GameEvent.ChippedGoal")
	proto.RegisterType((*GameEvent_BotTooFastInStop)(nil), "GameEvent.BotTooFastInStop")
	proto.RegisterType((*GameEvent_DefenderTooCloseToKickPoint)(nil), "GameEvent.DefenderTooCloseToKickPoint")
	proto.RegisterType((*GameEvent_BotCrashDrawn)(nil), "GameEvent.BotCrashDrawn")
	proto.RegisterType((*GameEvent_BotCrashUnique)(nil), "GameEvent.BotCrashUnique")
	proto.RegisterType((*GameEvent_BotPushedBot)(nil), "GameEvent.BotPushedBot")
	proto.RegisterType((*GameEvent_BotTippedOver)(nil), "GameEvent.BotTippedOver")
	proto.RegisterType((*GameEvent_DefenderInDefenseArea)(nil), "GameEvent.DefenderInDefenseArea")
	proto.RegisterType((*GameEvent_DefenderInDefenseAreaPartially)(nil), "GameEvent.DefenderInDefenseAreaPartially")
	proto.RegisterType((*GameEvent_AttackerTouchedBallInDefenseArea)(nil), "GameEvent.AttackerTouchedBallInDefenseArea")
	proto.RegisterType((*GameEvent_BotKickedBallTooFast)(nil), "GameEvent.BotKickedBallTooFast")
	proto.RegisterType((*GameEvent_BotDribbledBallTooFar)(nil), "GameEvent.BotDribbledBallTooFar")
	proto.RegisterType((*GameEvent_AttackerTouchedOpponentInDefenseArea)(nil), "GameEvent.AttackerTouchedOpponentInDefenseArea")
	proto.RegisterType((*GameEvent_AttackerDoubleTouchedBall)(nil), "GameEvent.AttackerDoubleTouchedBall")
	proto.RegisterType((*GameEvent_AttackerTooCloseToDefenseArea)(nil), "GameEvent.AttackerTooCloseToDefenseArea")
	proto.RegisterType((*GameEvent_BotHeldBallDeliberately)(nil), "GameEvent.BotHeldBallDeliberately")
	proto.RegisterType((*GameEvent_BotInterferedPlacement)(nil), "GameEvent.BotInterferedPlacement")
	proto.RegisterType((*GameEvent_MultipleCards)(nil), "GameEvent.MultipleCards")
	proto.RegisterType((*GameEvent_MultipleFouls)(nil), "GameEvent.MultipleFouls")
	proto.RegisterType((*GameEvent_MultiplePlacementFailures)(nil), "GameEvent.MultiplePlacementFailures")
	proto.RegisterType((*GameEvent_KickTimeout)(nil), "GameEvent.KickTimeout")
	proto.RegisterType((*GameEvent_NoProgressInGame)(nil), "GameEvent.NoProgressInGame")
	proto.RegisterType((*GameEvent_PlacementFailed)(nil), "GameEvent.PlacementFailed")
	proto.RegisterType((*GameEvent_UnsportingBehaviorMinor)(nil), "GameEvent.UnsportingBehaviorMinor")
	proto.RegisterType((*GameEvent_UnsportingBehaviorMajor)(nil), "GameEvent.UnsportingBehaviorMajor")
	proto.RegisterType((*GameEvent_KeeperHeldBall)(nil), "GameEvent.KeeperHeldBall")
	proto.RegisterType((*GameEvent_PlacementSucceeded)(nil), "GameEvent.PlacementSucceeded")
	proto.RegisterType((*GameEvent_Prepared)(nil), "GameEvent.Prepared")
	proto.RegisterType((*GameEvent_BotSubstitution)(nil), "GameEvent.BotSubstitution")
	proto.RegisterType((*GameEvent_TooManyRobots)(nil), "GameEvent.TooManyRobots")
	proto.RegisterType((*GameEvent_BoundaryCrossing)(nil), "GameEvent.BoundaryCrossing")
}

func init() {
	proto.RegisterFile("ssl_game_event.proto", fileDescriptor_9d7737834ddab500)
}

var fileDescriptor_9d7737834ddab500 = []byte{
	// 2884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x4b, 0x6f, 0xe3, 0xd6,
	0xf5, 0x17, 0x35, 0x7e, 0x1e, 0x59, 0x36, 0xe7, 0xfa, 0x45, 0xcb, 0x63, 0x8f, 0xe2, 0x79, 0xc4,
	0x9e, 0x64, 0x6c, 0xcc, 0xe0, 0xff, 0x2f, 0x50, 0x04, 0x45, 0xa0, 0x07, 0x6d, 0x31, 0xa6, 0x45,
	0x85, 0xa2, 0x26, 0x75, 0x1f, 0xb8, 0xa1, 0xa4, 0x6b, 0x9b, 0x31, 0x45, 0xb2, 0x24, 0xe5, 0x8c,
	0x50, 0xa0, 0xcb, 0xae, 0xfa, 0x40, 0xd1, 0x45, 0x17, 0x4d, 0x96, 0xfd, 0x02, 0x5d, 0x77, 0xd7,
	0x55, 0xbb, 0xeb, 0xc7, 0x28, 0xd0, 0x0f, 0x51, 0xdc, 0x4b, 0x8a, 0x22, 0xf5, 0xb0, 0x8c, 0x34,
	0xee, 0xa4, 0xab, 0x19, 0x9e, 0xc7, 0xef, 0x3c, 0xef, 0xb9, 0x0f, 0x19, 0xd6, 0x3c, 0xcf, 0xc4,
	0x97, 0x7a, 0x87, 0x60, 0x72, 0x43, 0x2c, 0xff, 0xd0, 0x71, 0x6d, 0xdf, 0xde, 0x7b, 0x0d, 0xb3,
	0x45, 0xdb, 0x97, 0xda, 0x68, 0x19, 0xd2, 0x46, 0x5b, 0xe0, 0xf2, 0xdc, 0xfe, 0xac, 0x9a, 0x36,
	0xda, 0x68, 0x0b, 0x66, 0x7c, 0xa2, 0x77, 0x84, 0x74, 0x9e, 0xdb, 0x5f, 0x7e, 0x3d, 0x7b, 0xa8,
	0x11, 0xbd, 0xa3, 0x32, 0xd2, 0xde, 0x73, 0x58, 0x90, 0xed, 0x96, 0xee, 0x1b, 0xb6, 0x85, 0x96,
	0x80, 0x7b, 0x2b, 0x70, 0xf9, 0xf4, 0x7e, 0x5a, 0xe5, 0xde, 0xd2, 0xaf, 0x9e, 0x90, 0x0e, 0xbe,
	0x7a, 0x7b, 0xff, 0x94, 0x60, 0xf1, 0x44, 0xef, 0x10, 0x91, 0xda, 0x43, 0x4f, 0x60, 0xc6, 0xef,
	0x39, 0x44, 0xd8, 0xcf, 0xa7, 0xf7, 0x97, 0x5f, 0xaf, 0x1c, 0x46, 0x9c, 0x43, 0xad, 0xe7, 0x10,
	0x95, 0x31, 0xd1, 0x06, 0xcc, 0xd9, 0xae, 0x71, 0x69, 0x58, 0xc2, 0x41, 0xfe, 0xc1, 0xfe, 0xa2,
	0x1a, 0x7e, 0xa1, 0x37, 0x90, 0x6b, 0xea, 0xa6, 0x89, 0x4d, 0x72, 0xe1, 0xe3, 0x0b, 0x83, 0x98,
	0x6d, 0xec, 0xdb, 0xdd, 0xd6, 0x15, 0x36, 0x0d, 0x8b, 0x08, 0x73, 0x79, 0x6e, 0x3f, 0xf3, 0x5a,
	0x88, 0x41, 0x16, 0x75, 0xd3, 0x94, 0xc9, 0x85, 0x7f, 0x4c, 0x45, 0x2b, 0x29, 0x75, 0xa3, 0x19,
	0x27, 0x68, 0x54, 0x55, 0x36, 0x2c, 0x82, 0x34, 0xd8, 0x1a, 0xc6, 0xbd, 0xb4, 0x75, 0x33, 0x80,
	0x9d, 0x9f, 0x0a, 0xbb, 0x9e, 0x80, 0x3d, 0xb1, 0x75, 0x93, 0xa1, 0x7e, 0x04, 0x4b, 0xba, 0xd1,
	0x31, 0x89, 0xe7, 0xe1, 0x6b, 0xa3, 0x75, 0x2d, 0x64, 0x18, 0xd0, 0x46, 0x0c, 0xa8, 0x10, 0xb0,
	0x4f, 0x8d, 0xd6, 0x75, 0x25, 0xa5, 0x66, 0xf4, 0xc1, 0x27, 0xfa, 0x1e, 0x64, 0x1d, 0xdb, 0xf3,
	0x8c, 0xa6, 0x49, 0x98, 0x2f, 0xc2, 0xfb, 0x4c, 0x3b, 0x9e, 0x30, 0x6a, 0xa8, 0x92, 0x52, 0x97,
	0xfa, 0x72, 0xf4, 0x1b, 0xc9, 0xb0, 0x6a, 0xd9, 0xd8, 0x71, 0xed, 0x4b, 0x97, 0x1a, 0x36, 0x2c,
	0x56, 0x6c, 0x56, 0xbf, 0xcc, 0xeb, 0xed, 0x98, 0x76, 0xd5, 0xae, 0x85, 0x42, 0x92, 0x45, 0xa9,
	0x95, 0x94, 0xca, 0x5b, 0x43, 0x34, 0x74, 0x09, 0x8f, 0x74, 0xdf, 0xd7, 0x5b, 0xd7, 0xc4, 0xc5,
	0x6d, 0xbb, 0x4b, 0x9d, 0x61, 0x09, 0x27, 0x6d, 0x4c, 0x63, 0x16, 0x96, 0x19, 0xec, 0xd3, 0x78,
	0x48, 0xa1, 0x78, 0x99, 0x49, 0x6b, 0x81, 0x30, 0x4d, 0x58, 0x25, 0xa5, 0x6e, 0xe9, 0x93, 0x98,
	0xa8, 0x0b, 0x7b, 0x91, 0x21, 0xdf, 0xb6, 0x71, 0xcb, 0xb4, 0x3d, 0x6a, 0x0b, 0xb7, 0xc9, 0x05,
	0xb1, 0x3c, 0x82, 0x75, 0x97, 0xe8, 0xc2, 0x2a, 0x33, 0xb7, 0x3f, 0xc6, 0x9c, 0x66, 0xdb, 0x25,
	0xaa, 0xa2, 0xd9, 0xe5, 0x40, 0xa1, 0xe0, 0x12, 0xbd, 0x92, 0x52, 0x77, 0xf4, 0xdb, 0x04, 0xd0,
	0x8f, 0x41, 0x60, 0x06, 0xda, 0xc4, 0xa5, 0xa9, 0x4a, 0x18, 0x7b, 0xcc, 0x8c, 0xe5, 0x63, 0xc6,
	0xca, 0xa1, 0xa8, 0x64, 0x25, 0x8d, 0xac, 0xb7, 0xc7, 0x31, 0xd0, 0x27, 0xf0, 0xb0, 0x69, 0x77,
	0xad, 0xb6, 0xee, 0xf6, 0x70, 0xcb, 0xa5, 0x45, 0xb2, 0x2e, 0x85, 0x0f, 0x46, 0x0a, 0x51, 0x0c,
	0x65, 0x4a, 0xa1, 0x08, 0x2d, 0x44, 0x73, 0x88, 0x86, 0x44, 0xe0, 0xaf, 0x09, 0x71, 0x88, 0x8b,
	0xaf, 0x68, 0x77, 0xb2, 0xe4, 0x67, 0x19, 0xd4, 0x56, 0x0c, 0xea, 0x94, 0x89, 0x54, 0x88, 0xd9,
	0xcf, 0xf8, 0xf2, 0x75, 0x82, 0x82, 0x7e, 0x02, 0x5b, 0x4d, 0xdb, 0xc7, 0x6d, 0xd7, 0x68, 0x36,
	0xcd, 0xb0, 0x88, 0x2c, 0xdf, 0x17, 0xba, 0x2b, 0x3c, 0x1c, 0x09, 0xb8, 0x68, 0xfb, 0xe5, 0x50,
	0x94, 0xaa, 0x6b, 0xb6, 0x7d, 0xac, 0xbb, 0xac, 0xe1, 0xc7, 0x31, 0xd0, 0x2f, 0xe0, 0x59, 0xac,
	0x88, 0x83, 0x36, 0x19, 0x49, 0xed, 0x0a, 0xb3, 0xf4, 0xc1, 0xd8, 0x3a, 0x46, 0x3d, 0x31, 0x9c,
	0xe5, 0xbc, 0x3e, 0x45, 0x06, 0x9d, 0x83, 0x40, 0xa3, 0xa3, 0x8b, 0x2d, 0x19, 0x9b, 0xe7, 0x0b,
	0x88, 0x99, 0x7c, 0x9c, 0x0c, 0xee, 0x94, 0x49, 0x46, 0x11, 0x78, 0x7e, 0x25, 0xa5, 0xae, 0x35,
	0xc7, 0xd0, 0x69, 0xfe, 0x29, 0x74, 0xcb, 0xd5, 0xbd, 0x2b, 0xdc, 0xb5, 0x8c, 0x9f, 0x75, 0x89,
	0xb0, 0x31, 0x92, 0xff, 0xa2, 0xed, 0x97, 0xa8, 0x44, 0x83, 0x09, 0xd0, 0xfc, 0x37, 0x13, 0x14,
	0x54, 0x84, 0x95, 0x01, 0x4c, 0xdb, 0xd5, 0xbf, 0xb4, 0x84, 0xf5, 0xd1, 0xf1, 0x12, 0xea, 0x94,
	0x29, 0xbf, 0x92, 0x52, 0xb3, 0xcd, 0x38, 0x01, 0xd9, 0x90, 0x8f, 0x7a, 0x36, 0xb1, 0x54, 0x68,
	0xdc, 0xd8, 0xb1, 0x0d, 0xcb, 0x17, 0x76, 0x18, 0xe8, 0xf3, 0x31, 0xbd, 0x3b, 0x58, 0x07, 0x34,
	0xc8, 0x1a, 0x95, 0xae, 0xa4, 0xd4, 0xed, 0xf6, 0x64, 0x36, 0x3a, 0x03, 0x9a, 0x93, 0x28, 0x95,
	0xb4, 0x9a, 0x9e, 0x6f, 0x3b, 0xc2, 0xa3, 0x31, 0xad, 0xec, 0x87, 0x09, 0x93, 0xac, 0xba, 0x6f,
	0x3b, 0x41, 0x2b, 0x27, 0x69, 0xe8, 0xa7, 0x41, 0x95, 0x0c, 0xcb, 0x27, 0xee, 0x05, 0x71, 0x49,
	0x1b, 0x3b, 0xa6, 0xde, 0x22, 0x1d, 0x62, 0xf9, 0xc2, 0x1a, 0x83, 0x7c, 0x2f, 0x09, 0x29, 0x45,
	0x92, 0xb5, 0xbe, 0x20, 0x9b, 0xe5, 0x63, 0x39, 0xe8, 0x19, 0xcc, 0xb0, 0x79, 0xb9, 0x30, 0x69,
	0x5e, 0x32, 0x36, 0xfa, 0x3f, 0x58, 0x32, 0xac, 0x1b, 0xdd, 0x34, 0x82, 0x51, 0x2f, 0x7c, 0x38,
	0x49, 0x3c, 0x13, 0x8a, 0xb1, 0xe9, 0x7a, 0x02, 0x7c, 0xe4, 0x2c, 0xbe, 0xd0, 0x0d, 0x93, 0xb4,
	0x85, 0x07, 0x4c, 0x33, 0x17, 0xd3, 0x8c, 0x9c, 0x39, 0x66, 0x12, 0x95, 0x94, 0xba, 0xe2, 0x24,
	0x49, 0xa8, 0x06, 0xab, 0x03, 0x20, 0xaf, 0xdb, 0x6a, 0x11, 0xd2, 0x26, 0x6d, 0x61, 0x96, 0x61,
	0xed, 0x8c, 0xc3, 0xaa, 0xf7, 0x85, 0x2a, 0x29, 0x15, 0x39, 0x23, 0x54, 0x54, 0x80, 0xe5, 0x4e,
	0xd7, 0xf4, 0x0d, 0xc7, 0x24, 0xb8, 0xa5, 0xbb, 0x6d, 0x4f, 0xc8, 0x8f, 0x74, 0xd6, 0x59, 0x28,
	0x50, 0xa2, 0x7c, 0xda, 0x59, 0x9d, 0x38, 0x21, 0x01, 0x71, 0x61, 0x77, 0x4d, 0x4f, 0xd8, 0x9b,
	0x08, 0x71, 0x4c, 0xf9, 0x71, 0x08, 0x46, 0xa0, 0x09, 0xa2, 0xc5, 0xf5, 0xba, 0x4d, 0xcf, 0x37,
	0xfc, 0x2e, 0x3d, 0x1c, 0x08, 0xcf, 0x46, 0x12, 0x54, 0xb4, 0xfd, 0x7a, 0x4c, 0x82, 0x26, 0xa8,
	0x99, 0x24, 0xa1, 0xcf, 0x61, 0xab, 0x6b, 0x79, 0x8e, 0xed, 0xfa, 0x86, 0x75, 0x89, 0x9b, 0xe4,
	0x4a, 0xbf, 0x31, 0x6c, 0x17, 0x77, 0x0c, 0xcb, 0x76, 0x85, 0x27, 0x0c, 0x71, 0x2f, 0x86, 0xd8,
	0x88, 0x64, 0x8b, 0xa1, 0xe8, 0x19, 0x95, 0xac, 0xa4, 0xd4, 0xcd, 0xee, 0x78, 0xd6, 0x44, 0x0b,
	0xfa, 0x17, 0xb6, 0x2b, 0x3c, 0xbd, 0x8b, 0x05, 0x2a, 0x39, 0xc1, 0x02, 0x65, 0xa1, 0x8f, 0x81,
	0xae, 0x7f, 0xec, 0x74, 0x3d, 0x36, 0x09, 0x6d, 0x5f, 0x10, 0x18, 0xec, 0x66, 0x32, 0x15, 0x35,
	0xc6, 0x2f, 0xda, 0xb4, 0xab, 0x97, 0x9a, 0xb1, 0x6f, 0xa4, 0x43, 0x8e, 0x02, 0x44, 0x23, 0x1f,
	0xb7, 0x89, 0x69, 0x34, 0x89, 0xab, 0xfb, 0xc4, 0xec, 0x09, 0xb9, 0x11, 0x1f, 0x29, 0x46, 0x38,
	0xea, 0xcb, 0x31, 0x49, 0xea, 0x63, 0x73, 0x3c, 0xab, 0x3f, 0x91, 0x7c, 0xc3, 0x71, 0x48, 0x1b,
	0xdb, 0x37, 0xc4, 0x15, 0xb6, 0xc7, 0x4d, 0x24, 0x8d, 0x09, 0x28, 0x37, 0xc4, 0x0d, 0x27, 0xd2,
	0x80, 0x80, 0xfe, 0x1f, 0x16, 0x1c, 0x97, 0x38, 0xba, 0x4b, 0x82, 0xa3, 0x63, 0xe6, 0xf5, 0x6a,
	0xbc, 0x83, 0x43, 0x56, 0x31, 0x2d, 0x70, 0x95, 0x94, 0x1a, 0x89, 0xa2, 0x63, 0x58, 0xa1, 0x33,
	0xa5, 0xa3, 0x5b, 0x3d, 0xec, 0xda, 0x4d, 0xdb, 0xf7, 0x84, 0xe7, 0x23, 0xa6, 0x35, 0xdb, 0x3e,
	0xd3, 0xad, 0x9e, 0xca, 0xf8, 0x21, 0x44, 0xd6, 0x8f, 0x13, 0x51, 0x11, 0xb2, 0x86, 0xd5, 0x36,
	0x5c, 0xd2, 0xf2, 0x83, 0xb5, 0xbc, 0x38, 0x92, 0x65, 0x29, 0xe4, 0xd3, 0x45, 0x1c, 0x82, 0x2c,
	0x19, 0x31, 0x1a, 0xfa, 0x18, 0x96, 0x5a, 0x57, 0x41, 0x0e, 0x18, 0x04, 0x8c, 0x9c, 0xd5, 0x4a,
	0x01, 0x3b, 0x86, 0x90, 0x69, 0x0d, 0x48, 0x14, 0x80, 0xcd, 0x5f, 0xdf, 0xe8, 0x10, 0xbb, 0xeb,
	0x0b, 0x4b, 0x23, 0x00, 0x74, 0xa0, 0x6a, 0x01, 0xb7, 0x0f, 0x70, 0x3d, 0x20, 0xa1, 0xdf, 0x70,
	0x70, 0x30, 0xb2, 0x7b, 0xda, 0x8e, 0x63, 0x5b, 0x74, 0x44, 0x0c, 0xef, 0xa0, 0x3c, 0x83, 0x3f,
	0x9a, 0xbc, 0x83, 0x2a, 0xa1, 0x66, 0x62, 0x87, 0x0c, 0xed, 0x3e, 0xd5, 0xef, 0x20, 0x8b, 0xbe,
	0xe6, 0xe0, 0xd5, 0x9d, 0x1d, 0xc2, 0xde, 0x35, 0xcb, 0x85, 0xf0, 0xe2, 0x3f, 0x71, 0xec, 0x83,
	0xbb, 0x38, 0x56, 0x0f, 0x2c, 0xa1, 0x1f, 0x06, 0xfb, 0x48, 0x7c, 0x4b, 0x8e, 0xbc, 0xd8, 0x9c,
	0xb2, 0x35, 0x87, 0xf6, 0xd6, 0x93, 0xdb, 0x73, 0x1f, 0xb9, 0x0a, 0x1b, 0xc9, 0x75, 0x1b, 0xe1,
	0x6e, 0x4d, 0x5b, 0xbf, 0xab, 0xf1, 0xf5, 0xdb, 0xc7, 0xfb, 0x39, 0xec, 0x4d, 0x3a, 0x65, 0x62,
	0x47, 0x77, 0x7d, 0x43, 0x37, 0xcd, 0x9e, 0xb0, 0xcb, 0xb0, 0x0f, 0xa6, 0x9d, 0x37, 0x6b, 0x7d,
	0x85, 0x30, 0x86, 0xdd, 0xf6, 0xad, 0x52, 0xe8, 0x0b, 0xd8, 0x8e, 0x86, 0x7a, 0x72, 0xef, 0xea,
	0xba, 0xc4, 0x13, 0xde, 0x1b, 0x39, 0xc1, 0xf7, 0x27, 0x7c, 0x62, 0x17, 0xa3, 0xb2, 0xa1, 0xc1,
	0xad, 0xce, 0x24, 0x81, 0x5c, 0x07, 0xb2, 0x89, 0xbb, 0x11, 0xda, 0x85, 0xf9, 0x66, 0x0f, 0xb3,
	0x1b, 0x24, 0xc7, 0x2e, 0x7c, 0xe1, 0x0d, 0x72, 0xae, 0xd9, 0xa3, 0xff, 0xa2, 0x75, 0x98, 0x6b,
	0xf6, 0xd8, 0x64, 0xa4, 0x17, 0x94, 0xac, 0x3a, 0xdb, 0xec, 0xd1, 0xb9, 0xf7, 0x0c, 0x16, 0xcc,
	0xf0, 0x6a, 0x19, 0x6e, 0xaf, 0x8b, 0x87, 0xfd, 0xbb, 0xa6, 0x1a, 0xb1, 0x72, 0x7f, 0xe4, 0x20,
	0x13, 0xbb, 0x42, 0xdd, 0xaf, 0x35, 0x74, 0x08, 0x59, 0xb6, 0xc2, 0x23, 0xd9, 0x99, 0x61, 0x59,
	0x36, 0x01, 0xfa, 0x5f, 0xb9, 0xdf, 0xa6, 0x61, 0x86, 0x8d, 0x86, 0x69, 0x6e, 0xed, 0x07, 0xa3,
	0x83, 0xee, 0x42, 0x4c, 0x68, 0x2e, 0x7e, 0xd7, 0xce, 0x84, 0x2c, 0x26, 0xf9, 0x18, 0xfa, 0x9f,
	0xb1, 0x28, 0x20, 0x24, 0xdd, 0x5f, 0x28, 0x68, 0x07, 0x98, 0x11, 0xec, 0x39, 0x24, 0x3c, 0xa4,
	0xa4, 0xd5, 0x45, 0x4a, 0xa9, 0x53, 0x02, 0x7a, 0x0e, 0x2b, 0x1d, 0xfd, 0x6d, 0xb0, 0x43, 0x5d,
	0x11, 0xe3, 0xf2, 0xca, 0x67, 0x97, 0xe6, 0xb4, 0x9a, 0xed, 0xe8, 0x6f, 0xd9, 0x4d, 0x84, 0x11,
	0x73, 0x5f, 0x71, 0xb0, 0x14, 0x9f, 0xc4, 0xdf, 0xb1, 0x82, 0xfd, 0x95, 0x83, 0x4c, 0x6c, 0xca,
	0x7f, 0xb7, 0xbc, 0x1b, 0x97, 0xe4, 0xd9, 0x71, 0x49, 0xfe, 0x25, 0x07, 0xfc, 0xf0, 0x39, 0xfc,
	0x9e, 0x43, 0x59, 0x83, 0xd9, 0xa0, 0x33, 0x66, 0x98, 0x43, 0xc1, 0x47, 0xee, 0x0f, 0x1c, 0x6c,
	0xdf, 0x72, 0xeb, 0xb8, 0x67, 0x9f, 0x72, 0xb0, 0xd0, 0x36, 0x3c, 0x5f, 0xb7, 0x5a, 0x24, 0x74,
	0x2b, 0xfa, 0xce, 0xfd, 0x83, 0x83, 0x6c, 0xe2, 0x92, 0x45, 0x1b, 0x9c, 0x8e, 0xf9, 0x1e, 0x31,
	0x4d, 0xfb, 0x4b, 0x76, 0x86, 0xc9, 0xaa, 0x8b, 0x4d, 0xdb, 0x3f, 0x67, 0x04, 0xb4, 0x05, 0x0b,
	0x94, 0xdd, 0x34, 0xbb, 0x24, 0x74, 0x66, 0xbe, 0x69, 0xfb, 0x45, 0xb3, 0x4b, 0xee, 0xea, 0xce,
	0x63, 0xc8, 0x04, 0x1b, 0x55, 0x3c, 0x51, 0xc0, 0x48, 0xc1, 0x1a, 0xda, 0x01, 0x60, 0x2c, 0xdc,
	0x36, 0x2e, 0x2e, 0xfa, 0x4b, 0x8c, 0x51, 0xca, 0xc6, 0xc5, 0xc5, 0x40, 0x5f, 0xb7, 0x2e, 0xcd,
	0xe0, 0xa9, 0xab, 0xaf, 0x5f, 0xa0, 0x94, 0xdc, 0xbf, 0x38, 0x58, 0x4e, 0xee, 0x71, 0x53, 0x13,
	0x9c, 0x83, 0x85, 0x1b, 0xc3, 0x36, 0x75, 0xdf, 0x76, 0xc3, 0xa8, 0xa2, 0x6f, 0xb4, 0x01, 0x73,
	0x37, 0x46, 0xcb, 0x37, 0x3a, 0x2c, 0xa8, 0xac, 0x1a, 0x7e, 0x25, 0xc2, 0x9d, 0xb9, 0x73, 0xb8,
	0xb3, 0x53, 0xc2, 0x9d, 0x9b, 0x12, 0xee, 0xfc, 0x48, 0xb8, 0x7f, 0xe6, 0x60, 0x29, 0xbe, 0xf5,
	0xbe, 0xcb, 0x60, 0xdf, 0x87, 0x95, 0xf0, 0xa8, 0x10, 0x75, 0x5c, 0x10, 0xf0, 0x72, 0x40, 0x2e,
	0xf7, 0xfb, 0xee, 0xeb, 0xa0, 0xef, 0x62, 0x27, 0xe7, 0x7b, 0x1f, 0x31, 0xc1, 0xb3, 0xe6, 0xe4,
	0x11, 0xc3, 0x5e, 0x2e, 0xfb, 0x03, 0xf0, 0x77, 0x1c, 0xac, 0x8f, 0x3d, 0x73, 0xbc, 0xc3, 0xb5,
	0xfa, 0x77, 0x0e, 0x76, 0x6f, 0x3f, 0x07, 0xbd, 0x3b, 0xe7, 0x46, 0x13, 0x3c, 0x7b, 0x7b, 0x82,
	0xbf, 0xe2, 0x20, 0x3f, 0xed, 0xa5, 0xeb, 0x1d, 0xe6, 0xfa, 0x2f, 0x1c, 0xac, 0x8d, 0x7b, 0x15,
	0xbb, 0x67, 0x97, 0x3e, 0x04, 0x64, 0x58, 0x06, 0x2d, 0x66, 0xb0, 0xbb, 0xc5, 0x47, 0x24, 0x1f,
	0x72, 0xa8, 0x37, 0xc1, 0xe4, 0x10, 0x60, 0x3e, 0xbc, 0x77, 0xb1, 0x6c, 0x2f, 0xa8, 0xfd, 0xcf,
	0xdc, 0xaf, 0x38, 0x58, 0x1f, 0xfb, 0x62, 0xf9, 0x4d, 0xfd, 0x7f, 0x0c, 0xb3, 0x9e, 0xaf, 0xbb,
	0xfe, 0xa8, 0xf3, 0x01, 0x1d, 0x6d, 0xc3, 0x03, 0x62, 0xb5, 0x47, 0x97, 0x15, 0xa5, 0xd2, 0x62,
	0x3f, 0xbd, 0xcb, 0xdd, 0xe7, 0x9b, 0x7a, 0x37, 0x98, 0x5a, 0x33, 0x13, 0xa7, 0xd6, 0x2d, 0x87,
	0xe7, 0x1e, 0x6c, 0x4d, 0x7c, 0xab, 0xbf, 0xe7, 0x73, 0xfb, 0xdf, 0x38, 0xd8, 0xb9, 0xf5, 0xe1,
	0xfe, 0x7f, 0x68, 0x49, 0xff, 0x9e, 0x83, 0xcd, 0x09, 0xcf, 0x2e, 0xff, 0x85, 0x28, 0xba, 0xee,
	0x60, 0xb0, 0xd3, 0x28, 0xc2, 0xef, 0xdc, 0x0d, 0x6c, 0x8c, 0x7f, 0x38, 0xbd, 0xe7, 0xca, 0x1e,
	0x41, 0x36, 0xf1, 0xc6, 0x38, 0xcd, 0x5c, 0x5c, 0x21, 0x78, 0x40, 0x9c, 0xa6, 0xf0, 0x11, 0x6c,
	0x4d, 0xbc, 0xa0, 0x4e, 0x55, 0xbe, 0x82, 0x4c, 0xec, 0x15, 0x66, 0x6a, 0x2e, 0xe2, 0x41, 0xa7,
	0x27, 0x17, 0x02, 0xc1, 0x8c, 0x6f, 0x74, 0x08, 0xcb, 0x4b, 0x5a, 0x65, 0xff, 0xcf, 0x9d, 0x01,
	0x3f, 0xfc, 0x03, 0x5b, 0x02, 0x8e, 0x9b, 0x0e, 0x97, 0x8e, 0xc1, 0x7d, 0x0e, 0x2b, 0x43, 0x8f,
	0xca, 0x53, 0x9d, 0x7f, 0x09, 0xc8, 0x25, 0x1d, 0xdd, 0xb0, 0xe8, 0x6d, 0x31, 0x6a, 0xf7, 0x00,
	0xf4, 0x61, 0xc4, 0x89, 0xce, 0x26, 0x9f, 0xc2, 0xe6, 0x84, 0x37, 0xd4, 0xa9, 0x96, 0x36, 0x60,
	0xce, 0x25, 0xba, 0xc7, 0x92, 0x94, 0xde, 0x5f, 0x54, 0xc3, 0xaf, 0x09, 0x90, 0xec, 0x65, 0xf4,
	0x9b, 0x42, 0x7a, 0xb0, 0x9c, 0xfc, 0x8d, 0xeb, 0xdb, 0xaa, 0x61, 0x7c, 0x31, 0x3d, 0x18, 0x5a,
	0x4c, 0xbf, 0xe6, 0x00, 0x8d, 0x3e, 0xc3, 0x4f, 0xb5, 0xbc, 0x03, 0x40, 0x6b, 0x87, 0x7d, 0xfd,
	0x9a, 0x58, 0x61, 0xe2, 0x17, 0x29, 0x45, 0xa3, 0x04, 0xf4, 0x08, 0x16, 0x1d, 0x97, 0xb4, 0x0c,
	0x6f, 0x60, 0x72, 0x40, 0xb8, 0x75, 0x9b, 0x3e, 0x80, 0x85, 0xfe, 0x9b, 0xea, 0x90, 0x11, 0x6e,
	0xc8, 0x48, 0xee, 0x15, 0xac, 0x0c, 0xbd, 0xb5, 0xdf, 0x65, 0x45, 0x26, 0xde, 0x5c, 0xa7, 0x2a,
	0x9c, 0xd3, 0xfb, 0xe6, 0xd0, 0xcf, 0x95, 0xdf, 0x4e, 0x55, 0xf6, 0xfe, 0xb4, 0x08, 0x33, 0x5a,
	0xcf, 0x21, 0x68, 0x1b, 0x36, 0x1b, 0xd5, 0xd3, 0xaa, 0xf2, 0x59, 0x15, 0x9f, 0x14, 0xce, 0x44,
	0x2c, 0xbe, 0x11, 0xab, 0x1a, 0xd6, 0xce, 0x6b, 0x22, 0x9f, 0x42, 0xbb, 0x90, 0x2b, 0x16, 0x64,
	0x19, 0xcb, 0xe2, 0xb1, 0x86, 0x8f, 0x25, 0x51, 0x2e, 0x63, 0x4d, 0x69, 0x94, 0x2a, 0x58, 0x96,
	0xaa, 0x22, 0x3f, 0x87, 0x76, 0x60, 0x6b, 0x98, 0x7f, 0xa2, 0x14, 0xe4, 0x80, 0x3d, 0x8f, 0x78,
	0x58, 0x2a, 0x48, 0x67, 0xb2, 0x58, 0xaf, 0xe3, 0x53, 0xa9, 0x74, 0xca, 0x67, 0xd0, 0x43, 0xc8,
	0xd6, 0x94, 0x7a, 0x5d, 0x2a, 0xca, 0x22, 0x93, 0xe4, 0xdf, 0x47, 0x9b, 0xb0, 0x5a, 0x55, 0x70,
	0x4d, 0x55, 0x4e, 0x54, 0x2a, 0x28, 0x05, 0x7e, 0xf0, 0x69, 0x94, 0x87, 0x47, 0x05, 0x4d, 0x2b,
	0x94, 0x4e, 0x45, 0x15, 0x97, 0x95, 0x06, 0x55, 0x61, 0xc6, 0xc5, 0x32, 0xa6, 0x46, 0xf9, 0x65,
	0xb4, 0x0e, 0x0f, 0x8b, 0x4a, 0xa3, 0x5a, 0x2e, 0xa8, 0xe7, 0xb8, 0xa4, 0x52, 0xdc, 0xea, 0x09,
	0x7f, 0x80, 0x9e, 0xc3, 0x5e, 0xa4, 0xa8, 0x29, 0x0a, 0x2e, 0xc9, 0x4a, 0x9d, 0xea, 0xe2, 0xb2,
	0x78, 0x2c, 0x56, 0xeb, 0x22, 0x2e, 0xa8, 0x62, 0x81, 0x5f, 0x45, 0x8f, 0x40, 0x60, 0x94, 0xb2,
	0xa8, 0x52, 0xb3, 0x09, 0xee, 0x63, 0xb4, 0x06, 0xfc, 0xa9, 0x28, 0xd6, 0x44, 0x15, 0x57, 0x68,
	0x5c, 0xcc, 0x64, 0x96, 0x45, 0xac, 0x68, 0xb8, 0xac, 0x4a, 0xc5, 0xa2, 0x1c, 0x7a, 0xc2, 0x8c,
	0x1c, 0x17, 0x54, 0xfe, 0x21, 0x3a, 0x80, 0x67, 0x31, 0xd3, 0x03, 0x67, 0x47, 0xf0, 0x57, 0xa8,
	0x75, 0x8a, 0x44, 0x13, 0x93, 0xc4, 0xa9, 0x6b, 0x3c, 0xa2, 0xd6, 0x29, 0xb7, 0xa4, 0x16, 0xea,
	0x15, 0xdc, 0xa8, 0x4a, 0x9f, 0x36, 0x44, 0x7e, 0x03, 0xad, 0xc2, 0xca, 0x80, 0x5a, 0x56, 0x0b,
	0x9f, 0x55, 0xf9, 0x75, 0xf4, 0x14, 0xf2, 0x51, 0x18, 0x89, 0x70, 0x29, 0x34, 0xae, 0x29, 0x52,
	0x55, 0xe3, 0x77, 0x90, 0x00, 0x6b, 0x54, 0xb5, 0x6f, 0x82, 0x3a, 0x54, 0xd7, 0x94, 0x1a, 0xff,
	0xa8, 0xef, 0x88, 0x54, 0xd5, 0x44, 0xf5, 0x58, 0x54, 0xc5, 0x32, 0xae, 0xc9, 0x85, 0x92, 0x78,
	0x26, 0x56, 0x35, 0x7e, 0x0d, 0x2d, 0xc0, 0x0c, 0x2b, 0xd4, 0x02, 0xad, 0xa6, 0x54, 0x7d, 0x53,
	0x90, 0xa5, 0xa0, 0xc8, 0xfc, 0x0b, 0xea, 0x64, 0x24, 0x8a, 0x8f, 0x0b, 0x92, 0x2c, 0x96, 0xf9,
	0x07, 0xb4, 0xa0, 0x03, 0x6a, 0xbd, 0x51, 0x2a, 0x89, 0x62, 0x59, 0x2c, 0xf3, 0xb3, 0x08, 0xc1,
	0xf2, 0x59, 0x43, 0xd6, 0xa4, 0x9a, 0x2c, 0xe2, 0x52, 0x41, 0x2d, 0xd7, 0xf9, 0x7c, 0x82, 0x76,
	0xac, 0x34, 0xe4, 0x3a, 0xbf, 0xd7, 0x8f, 0xbd, 0xde, 0x28, 0xd6, 0x35, 0x49, 0x6b, 0x68, 0x92,
	0x52, 0xe5, 0x9f, 0xd1, 0xcc, 0x37, 0xaa, 0xf5, 0x9a, 0xa2, 0x6a, 0x52, 0xf5, 0x04, 0x17, 0xc5,
	0x4a, 0xe1, 0x8d, 0xa4, 0xa8, 0xf8, 0x4c, 0xaa, 0x2a, 0x2a, 0xff, 0x64, 0x22, 0xbb, 0xf0, 0x89,
	0xa2, 0xf2, 0x4f, 0xa9, 0x1d, 0x8a, 0x59, 0x6b, 0xd4, 0x59, 0x49, 0x14, 0x8d, 0x17, 0x58, 0x77,
	0x2b, 0xda, 0xa0, 0xbc, 0xb8, 0x2c, 0xca, 0x52, 0x51, 0x54, 0x0b, 0x9a, 0x28, 0x9f, 0xf3, 0xb9,
	0x7e, 0xb6, 0x35, 0xa9, 0x56, 0x13, 0xcb, 0x58, 0x79, 0x23, 0xaa, 0xfc, 0x36, 0xe2, 0x61, 0xa1,
	0xa6, 0x8a, 0xb5, 0x82, 0x2a, 0x96, 0x79, 0x2e, 0x97, 0x5e, 0xe0, 0xd0, 0x26, 0xac, 0xd0, 0xac,
	0x9e, 0x15, 0xaa, 0xe7, 0x58, 0x55, 0x8a, 0x8a, 0x56, 0xe7, 0x9f, 0x33, 0xc6, 0x3a, 0x64, 0xa5,
	0x6a, 0x59, 0x52, 0xc5, 0x92, 0x16, 0x64, 0x6c, 0x91, 0x91, 0xd7, 0x60, 0xa9, 0x54, 0x09, 0x30,
	0x19, 0x15, 0xfa, 0x54, 0x56, 0x2f, 0x4d, 0x3a, 0x13, 0x95, 0x86, 0xc6, 0x2f, 0x31, 0xea, 0x2b,
	0x38, 0x18, 0xe9, 0x27, 0xa5, 0x56, 0x53, 0xaa, 0x34, 0xb7, 0xc3, 0x3d, 0xc5, 0x33, 0x95, 0xef,
	0xc3, 0xab, 0x3b, 0xab, 0xe0, 0xfa, 0x29, 0x73, 0x84, 0xdf, 0x67, 0xaa, 0xf9, 0xa0, 0x13, 0xe2,
	0x4d, 0x17, 0x49, 0x6c, 0x32, 0x89, 0x5d, 0xd8, 0x48, 0xa6, 0x31, 0xe2, 0x6f, 0x31, 0xfe, 0x0b,
	0xd8, 0x9b, 0xb4, 0xa4, 0x70, 0xad, 0xa0, 0x6a, 0x52, 0x41, 0x96, 0xcf, 0xf9, 0x5d, 0x26, 0xfb,
	0x04, 0xb6, 0xa3, 0xd2, 0x27, 0xdb, 0xa8, 0xa1, 0x8a, 0x75, 0xfe, 0x3d, 0x2a, 0x54, 0x9c, 0x87,
	0x59, 0xf6, 0xd7, 0x54, 0x2f, 0x0e, 0x60, 0x86, 0xcd, 0xb7, 0x0c, 0xcc, 0x87, 0xf3, 0x8a, 0x4f,
	0x21, 0x80, 0xb9, 0x73, 0x51, 0x96, 0x95, 0xcf, 0x78, 0x8e, 0x36, 0x6a, 0x51, 0x6e, 0x88, 0x7c,
	0xba, 0xf8, 0xf1, 0x8f, 0x7e, 0x70, 0x69, 0xf8, 0x57, 0xdd, 0xe6, 0x61, 0xcb, 0xee, 0x1c, 0xd1,
	0x59, 0x5b, 0xea, 0x3a, 0x2f, 0xeb, 0x75, 0xf9, 0xc8, 0xf3, 0xcc, 0x97, 0x97, 0x7a, 0x87, 0xbc,
	0x6c, 0xd9, 0x96, 0xef, 0xda, 0xa6, 0x49, 0xdc, 0x23, 0xf6, 0x6b, 0xb9, 0xa5, 0x9b, 0x47, 0xba,
	0xe3, 0x1c, 0x79, 0xbe, 0xee, 0x93, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x88, 0x81, 0x49,
	0xca, 0x25, 0x00, 0x00,
}
