// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_gc_engine.proto

package engine

import (
	fmt "fmt"
	state "github.com/RoboCup-SSL/ssl-game-controller/internal/app/state"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GcState struct {
	TeamState            map[string]*GcStateTeam    `protobuf:"bytes,1,rep,name=team_state,json=teamState" json:"team_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AutoRefState         map[string]*GcStateAutoRef `protobuf:"bytes,2,rep,name=auto_ref_state,json=autoRefState" json:"auto_ref_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TrackerState         map[string]*GcStateTracker `protobuf:"bytes,3,rep,name=tracker_state,json=trackerState" json:"tracker_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GcState) Reset()         { *m = GcState{} }
func (m *GcState) String() string { return proto.CompactTextString(m) }
func (*GcState) ProtoMessage()    {}
func (*GcState) Descriptor() ([]byte, []int) {
	return fileDescriptor_16bd66f36a99a3d1, []int{0}
}

func (m *GcState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GcState.Unmarshal(m, b)
}
func (m *GcState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GcState.Marshal(b, m, deterministic)
}
func (m *GcState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcState.Merge(m, src)
}
func (m *GcState) XXX_Size() int {
	return xxx_messageInfo_GcState.Size(m)
}
func (m *GcState) XXX_DiscardUnknown() {
	xxx_messageInfo_GcState.DiscardUnknown(m)
}

var xxx_messageInfo_GcState proto.InternalMessageInfo

func (m *GcState) GetTeamState() map[string]*GcStateTeam {
	if m != nil {
		return m.TeamState
	}
	return nil
}

func (m *GcState) GetAutoRefState() map[string]*GcStateAutoRef {
	if m != nil {
		return m.AutoRefState
	}
	return nil
}

func (m *GcState) GetTrackerState() map[string]*GcStateTracker {
	if m != nil {
		return m.TrackerState
	}
	return nil
}

type GcStateTeam struct {
	// true: The team is connected
	Connected *bool `protobuf:"varint,1,opt,name=connected" json:"connected,omitempty"`
	// true: The team connected via TLS with a verified certificate
	ConnectionVerified   *bool    `protobuf:"varint,2,opt,name=connection_verified,json=connectionVerified" json:"connection_verified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GcStateTeam) Reset()         { *m = GcStateTeam{} }
func (m *GcStateTeam) String() string { return proto.CompactTextString(m) }
func (*GcStateTeam) ProtoMessage()    {}
func (*GcStateTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_16bd66f36a99a3d1, []int{1}
}

func (m *GcStateTeam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GcStateTeam.Unmarshal(m, b)
}
func (m *GcStateTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GcStateTeam.Marshal(b, m, deterministic)
}
func (m *GcStateTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcStateTeam.Merge(m, src)
}
func (m *GcStateTeam) XXX_Size() int {
	return xxx_messageInfo_GcStateTeam.Size(m)
}
func (m *GcStateTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_GcStateTeam.DiscardUnknown(m)
}

var xxx_messageInfo_GcStateTeam proto.InternalMessageInfo

func (m *GcStateTeam) GetConnected() bool {
	if m != nil && m.Connected != nil {
		return *m.Connected
	}
	return false
}

func (m *GcStateTeam) GetConnectionVerified() bool {
	if m != nil && m.ConnectionVerified != nil {
		return *m.ConnectionVerified
	}
	return false
}

type GcStateAutoRef struct {
	// true: The autoRef connected via TLS with a verified certificate
	ConnectionVerified *bool `protobuf:"varint,1,opt,name=connection_verified,json=connectionVerified" json:"connection_verified,omitempty"`
	// if current state is prepare_kickoff, prepare_penalty, stop or ball_placement:
	// true: all conditions are met to continue from the current state
	// false: at least one condition not met yet
	// not present: not supported by the autoRef
	// else:
	// undefined
	ReadyToContinue *bool `protobuf:"varint,2,opt,name=ready_to_continue,json=readyToContinue" json:"ready_to_continue,omitempty"`
	// if current state is stop:
	// true: ball placement not required, can directly continue
	// false: need to initiate ball placement
	// if current state is ball placement:
	// true: ball placement done, all conditions met
	// false: ball not yet placed successfully
	BallPlaced *bool `protobuf:"varint,3,opt,name=ball_placed,json=ballPlaced" json:"ball_placed,omitempty"`
	// UNIX timestamp [Î¼s] when the ball last moved
	// Used by the GC to determine if there is still progress
	LastProgress *uint64 `protobuf:"varint,4,opt,name=last_progress,json=lastProgress" json:"last_progress,omitempty"`
	// map team -> team specific state
	TeamState            map[string]*GcStateAutoRefTeam `protobuf:"bytes,5,rep,name=team_state,json=teamState" json:"team_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GcStateAutoRef) Reset()         { *m = GcStateAutoRef{} }
func (m *GcStateAutoRef) String() string { return proto.CompactTextString(m) }
func (*GcStateAutoRef) ProtoMessage()    {}
func (*GcStateAutoRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_16bd66f36a99a3d1, []int{2}
}

func (m *GcStateAutoRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GcStateAutoRef.Unmarshal(m, b)
}
func (m *GcStateAutoRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GcStateAutoRef.Marshal(b, m, deterministic)
}
func (m *GcStateAutoRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcStateAutoRef.Merge(m, src)
}
func (m *GcStateAutoRef) XXX_Size() int {
	return xxx_messageInfo_GcStateAutoRef.Size(m)
}
func (m *GcStateAutoRef) XXX_DiscardUnknown() {
	xxx_messageInfo_GcStateAutoRef.DiscardUnknown(m)
}

var xxx_messageInfo_GcStateAutoRef proto.InternalMessageInfo

func (m *GcStateAutoRef) GetConnectionVerified() bool {
	if m != nil && m.ConnectionVerified != nil {
		return *m.ConnectionVerified
	}
	return false
}

func (m *GcStateAutoRef) GetReadyToContinue() bool {
	if m != nil && m.ReadyToContinue != nil {
		return *m.ReadyToContinue
	}
	return false
}

func (m *GcStateAutoRef) GetBallPlaced() bool {
	if m != nil && m.BallPlaced != nil {
		return *m.BallPlaced
	}
	return false
}

func (m *GcStateAutoRef) GetLastProgress() uint64 {
	if m != nil && m.LastProgress != nil {
		return *m.LastProgress
	}
	return 0
}

func (m *GcStateAutoRef) GetTeamState() map[string]*GcStateAutoRefTeam {
	if m != nil {
		return m.TeamState
	}
	return nil
}

type GcStateAutoRefTeam struct {
	// Number of robots currently on the field
	NumberOfRobots *uint32 `protobuf:"varint,1,opt,name=number_of_robots,json=numberOfRobots" json:"number_of_robots,omitempty"`
	// When the ball is in play, this flag indicates, if this team may change the keeper in confirmation with the rules
	MayChangeKeeper      *bool    `protobuf:"varint,2,opt,name=may_change_keeper,json=mayChangeKeeper" json:"may_change_keeper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GcStateAutoRefTeam) Reset()         { *m = GcStateAutoRefTeam{} }
func (m *GcStateAutoRefTeam) String() string { return proto.CompactTextString(m) }
func (*GcStateAutoRefTeam) ProtoMessage()    {}
func (*GcStateAutoRefTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_16bd66f36a99a3d1, []int{3}
}

func (m *GcStateAutoRefTeam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GcStateAutoRefTeam.Unmarshal(m, b)
}
func (m *GcStateAutoRefTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GcStateAutoRefTeam.Marshal(b, m, deterministic)
}
func (m *GcStateAutoRefTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcStateAutoRefTeam.Merge(m, src)
}
func (m *GcStateAutoRefTeam) XXX_Size() int {
	return xxx_messageInfo_GcStateAutoRefTeam.Size(m)
}
func (m *GcStateAutoRefTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_GcStateAutoRefTeam.DiscardUnknown(m)
}

var xxx_messageInfo_GcStateAutoRefTeam proto.InternalMessageInfo

func (m *GcStateAutoRefTeam) GetNumberOfRobots() uint32 {
	if m != nil && m.NumberOfRobots != nil {
		return *m.NumberOfRobots
	}
	return 0
}

func (m *GcStateAutoRefTeam) GetMayChangeKeeper() bool {
	if m != nil && m.MayChangeKeeper != nil {
		return *m.MayChangeKeeper
	}
	return false
}

type GcStateTracker struct {
	// Current ball position [m]
	BallPos *state.Location `protobuf:"bytes,1,opt,name=ball_pos,json=ballPos" json:"ball_pos,omitempty"`
	// Current ball velocity [m/s]
	BallVel              *state.Location `protobuf:"bytes,2,opt,name=ball_vel,json=ballVel" json:"ball_vel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GcStateTracker) Reset()         { *m = GcStateTracker{} }
func (m *GcStateTracker) String() string { return proto.CompactTextString(m) }
func (*GcStateTracker) ProtoMessage()    {}
func (*GcStateTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_16bd66f36a99a3d1, []int{4}
}

func (m *GcStateTracker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GcStateTracker.Unmarshal(m, b)
}
func (m *GcStateTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GcStateTracker.Marshal(b, m, deterministic)
}
func (m *GcStateTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcStateTracker.Merge(m, src)
}
func (m *GcStateTracker) XXX_Size() int {
	return xxx_messageInfo_GcStateTracker.Size(m)
}
func (m *GcStateTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_GcStateTracker.DiscardUnknown(m)
}

var xxx_messageInfo_GcStateTracker proto.InternalMessageInfo

func (m *GcStateTracker) GetBallPos() *state.Location {
	if m != nil {
		return m.BallPos
	}
	return nil
}

func (m *GcStateTracker) GetBallVel() *state.Location {
	if m != nil {
		return m.BallVel
	}
	return nil
}

func init() {
	proto.RegisterType((*GcState)(nil), "GcState")
	proto.RegisterMapType((map[string]*GcStateAutoRef)(nil), "GcState.AutoRefStateEntry")
	proto.RegisterMapType((map[string]*GcStateTeam)(nil), "GcState.TeamStateEntry")
	proto.RegisterMapType((map[string]*GcStateTracker)(nil), "GcState.TrackerStateEntry")
	proto.RegisterType((*GcStateTeam)(nil), "GcStateTeam")
	proto.RegisterType((*GcStateAutoRef)(nil), "GcStateAutoRef")
	proto.RegisterMapType((map[string]*GcStateAutoRefTeam)(nil), "GcStateAutoRef.TeamStateEntry")
	proto.RegisterType((*GcStateAutoRefTeam)(nil), "GcStateAutoRefTeam")
	proto.RegisterType((*GcStateTracker)(nil), "GcStateTracker")
}

func init() {
	proto.RegisterFile("ssl_gc_engine.proto", fileDescriptor_16bd66f36a99a3d1)
}

var fileDescriptor_16bd66f36a99a3d1 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdd, 0x8a, 0x13, 0x31,
	0x14, 0xc7, 0x99, 0x76, 0x97, 0x6d, 0xd3, 0x8f, 0xdd, 0x4d, 0x05, 0x4b, 0x11, 0x2d, 0xa3, 0x42,
	0x15, 0xda, 0x81, 0x5e, 0x88, 0x08, 0xea, 0x6a, 0x11, 0x41, 0x17, 0xac, 0xd3, 0xb2, 0x17, 0xb2,
	0x10, 0xd2, 0xe9, 0x69, 0x77, 0x6c, 0x26, 0x19, 0x32, 0x99, 0x42, 0xdf, 0xcb, 0x57, 0xf0, 0xbd,
	0x24, 0x99, 0xb4, 0x3b, 0x9d, 0x5a, 0xd0, 0xbb, 0xe4, 0x7f, 0xce, 0xf9, 0xe5, 0x7c, 0x11, 0xd4,
	0x4a, 0x12, 0x46, 0x96, 0x01, 0x01, 0xbe, 0x0c, 0x39, 0x0c, 0x62, 0x29, 0x94, 0xe8, 0x3c, 0x30,
	0x22, 0x8d, 0x80, 0xc0, 0x1a, 0xb8, 0xca, 0x54, 0xf7, 0x57, 0x19, 0x9d, 0x7d, 0x0e, 0x26, 0x8a,
	0x2a, 0xc0, 0xaf, 0x10, 0x52, 0x40, 0x23, 0x92, 0xe8, 0x5b, 0xdb, 0xe9, 0x96, 0x7b, 0xb5, 0xe1,
	0xc3, 0x81, 0xb5, 0x0e, 0xa6, 0x40, 0x23, 0x73, 0xfa, 0xc4, 0x95, 0xdc, 0xf8, 0x55, 0xb5, 0xbd,
	0xe3, 0x2b, 0xd4, 0xa4, 0xa9, 0x12, 0x44, 0xc2, 0xc2, 0xc6, 0x96, 0x4c, 0x6c, 0x67, 0x17, 0xfb,
	0x21, 0x55, 0xc2, 0x87, 0x45, 0x2e, 0xbc, 0x4e, 0x73, 0x12, 0x7e, 0x8f, 0x1a, 0x4a, 0xd2, 0x60,
	0x05, 0xd2, 0x02, 0xca, 0x05, 0xc0, 0x34, 0xb3, 0xe6, 0x01, 0x2a, 0x27, 0x75, 0xbe, 0xa0, 0xe6,
	0x7e, 0x7e, 0xf8, 0x02, 0x95, 0x57, 0xb0, 0x69, 0x3b, 0x5d, 0xa7, 0x57, 0xf5, 0xf5, 0x11, 0xbb,
	0xe8, 0x74, 0x4d, 0x59, 0xaa, 0xb3, 0x73, 0x7a, 0xb5, 0x61, 0x7d, 0x0b, 0xd7, 0x81, 0x7e, 0x66,
	0x7a, 0x53, 0x7a, 0xed, 0x74, 0xc6, 0xe8, 0xf2, 0x20, 0xdf, 0xbf, 0xe0, 0x9e, 0xef, 0xe3, 0xce,
	0xb7, 0x38, 0x1b, 0x5b, 0x20, 0x1e, 0x14, 0xf0, 0x1f, 0x44, 0x1b, 0x9b, 0x23, 0xba, 0xb7, 0xa8,
	0x96, 0xcb, 0x1e, 0x3f, 0x42, 0xd5, 0x40, 0x70, 0x0e, 0x81, 0x82, 0xb9, 0x21, 0x56, 0xfc, 0x7b,
	0x01, 0x7b, 0xa8, 0x65, 0x2f, 0xa1, 0xe0, 0x64, 0x0d, 0x32, 0x5c, 0x84, 0x30, 0x37, 0xaf, 0x54,
	0x7c, 0x7c, 0x6f, 0xba, 0xb1, 0x16, 0xf7, 0x77, 0x09, 0x35, 0xf7, 0xab, 0x39, 0xc6, 0x70, 0x8e,
	0x31, 0xf0, 0x4b, 0x74, 0x29, 0x81, 0xce, 0x37, 0x44, 0x09, 0x12, 0x08, 0xae, 0x42, 0x6e, 0x0b,
	0xab, 0xf8, 0xe7, 0xc6, 0x30, 0x15, 0x23, 0x2b, 0xe3, 0x27, 0xa8, 0x36, 0xa3, 0x8c, 0x91, 0x98,
	0xd1, 0x00, 0xe6, 0xed, 0xb2, 0xf1, 0x42, 0x5a, 0x1a, 0x1b, 0x05, 0x3f, 0x45, 0x0d, 0x46, 0x13,
	0x45, 0x62, 0x29, 0x96, 0x12, 0x92, 0xa4, 0x7d, 0xd2, 0x75, 0x7a, 0x27, 0x7e, 0x5d, 0x8b, 0x63,
	0xab, 0xe1, 0xb7, 0x7b, 0xeb, 0x7b, 0x6a, 0x36, 0xe8, 0x71, 0x61, 0x2a, 0xc7, 0xb7, 0xb8, 0xf3,
	0xfd, 0x1f, 0x56, 0xe8, 0xc5, 0xfe, 0x84, 0x5a, 0x05, 0x7a, 0x61, 0x93, 0xdc, 0x9f, 0x08, 0x1f,
	0x3a, 0xe0, 0x1e, 0xba, 0xe0, 0x69, 0x34, 0x03, 0x49, 0xc4, 0x82, 0x48, 0x31, 0x13, 0x2a, 0x31,
	0x6f, 0x34, 0xfc, 0x66, 0xa6, 0x7f, 0x5b, 0xf8, 0x46, 0xd5, 0x3d, 0x8c, 0xe8, 0x86, 0x04, 0x77,
	0x94, 0x2f, 0x81, 0xac, 0x00, 0x62, 0x90, 0xdb, 0x1e, 0x46, 0x74, 0x33, 0x32, 0xfa, 0x57, 0x23,
	0xbb, 0xb7, 0xbb, 0x91, 0xd9, 0x75, 0xc1, 0xcf, 0x50, 0x25, 0xeb, 0xaa, 0xc8, 0xf8, 0xb5, 0x61,
	0x75, 0x70, 0x2d, 0x02, 0xaa, 0xc7, 0xe4, 0x9f, 0x99, 0xee, 0x8a, 0x64, 0xe7, 0xb5, 0x06, 0x66,
	0xab, 0x2a, 0x7a, 0xdd, 0x00, 0xfb, 0x78, 0xf5, 0xe3, 0xdd, 0x32, 0x54, 0x77, 0xe9, 0x6c, 0x10,
	0x88, 0xc8, 0xd3, 0xe9, 0x8d, 0xd2, 0xb8, 0x3f, 0x99, 0x5c, 0x7b, 0x49, 0xc2, 0xfa, 0xfa, 0x57,
	0xe9, 0xeb, 0x21, 0x4b, 0xc1, 0x18, 0x48, 0x2f, 0xe4, 0x0a, 0x24, 0xa7, 0xcc, 0xa3, 0x71, 0xec,
	0x65, 0x9f, 0xd0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xf8, 0xa3, 0x6b, 0x94, 0x04, 0x00,
	0x00,
}
