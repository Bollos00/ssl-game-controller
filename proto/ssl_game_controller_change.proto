syntax = "proto2";

option go_package = "github.com/RoboCup-SSL/ssl-game-controller/internal/app/statemachine";

import "ssl_game_controller_state.proto";
import "ssl_game_event.proto";
import "ssl_referee.proto";

message StateChange {
    optional uint32 id = 1;
    optional State state_pre = 2;
    optional State state = 3;
    optional Change change = 4;
}

message Change {
    optional string origin = 1;

    oneof change {
        NewCommand new_command = 2;
        ChangeStage change_stage = 3;
        SetBallPlacementPos set_ball_placement_pos = 4;
        AddYellowCard add_yellow_card = 5;
        AddRedCard add_red_card = 6;
        YellowCardOver yellow_card_over = 7;
        AddGameEvent add_game_event = 8;
        AddProposedGameEvent add_proposed_game_event = 9;
        StartBallPlacement start_ball_placement = 10;
        Continue continue = 11;
        UpdateConfig update_config = 12;
        UpdateTeamState update_team_state = 13;
        SwitchColors switch_colors = 14;
        Revert revert = 15;
    }
}

message NewCommand {
    optional Command command = 1;
}

message ChangeStage {
    optional Referee.Stage new_stage = 1;
}

message SetBallPlacementPos {
    optional Location pos = 1;
}

message AddYellowCard {
    optional Team for_team = 1;
    optional GameEvent caused_by_game_event = 2;
}

message AddRedCard {
    optional Team for_team = 1;
    optional GameEvent caused_by_game_event = 2;
}

message YellowCardOver {
}

message AddGameEvent {
    optional GameEvent game_event = 1;
}

message AddProposedGameEvent {
    optional GameEvent game_event = 1;
}

message StartBallPlacement {
}

message Continue {
}

message UpdateConfig {
    optional State.Division division = 1;
    optional Team first_kickoff_team = 2;
    optional bool auto_continue = 3;
    map<string, State.GameEventBehavior> game_event_behavior = 4;
}

message UpdateTeamState {
    optional Team for_team = 1;

    optional string team_name = 2;
    optional int32 goals = 3;
    optional int32 goalkeeper = 4;
    optional int32 timeouts_left = 5;
    optional string timeout_time_left = 6;
    optional bool on_positive_half = 7;
    optional int32 ball_placement_failures = 8;
    optional bool can_place_ball = 9;
    optional bool bot_substitution_intent = 10;
    map<uint32, YellowCard> yellow_cards = 11;
    optional uint32 yellow_cards_remove = 12;
    map<uint32, RedCard> red_cards = 13;
    optional uint32 red_cards_remove = 14;
}

message SwitchColors {
}

message Revert {
    optional int32 state_id = 1;
}