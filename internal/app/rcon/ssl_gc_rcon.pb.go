// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_gc_rcon.proto

package rcon

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ControllerReply_StatusCode int32

const (
	ControllerReply_UNKNOWN_STATUS_CODE ControllerReply_StatusCode = 0
	ControllerReply_OK                  ControllerReply_StatusCode = 1
	ControllerReply_REJECTED            ControllerReply_StatusCode = 2
)

var ControllerReply_StatusCode_name = map[int32]string{
	0: "UNKNOWN_STATUS_CODE",
	1: "OK",
	2: "REJECTED",
}

var ControllerReply_StatusCode_value = map[string]int32{
	"UNKNOWN_STATUS_CODE": 0,
	"OK":                  1,
	"REJECTED":            2,
}

func (x ControllerReply_StatusCode) Enum() *ControllerReply_StatusCode {
	p := new(ControllerReply_StatusCode)
	*p = x
	return p
}

func (x ControllerReply_StatusCode) String() string {
	return proto.EnumName(ControllerReply_StatusCode_name, int32(x))
}

func (x *ControllerReply_StatusCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ControllerReply_StatusCode_value, data, "ControllerReply_StatusCode")
	if err != nil {
		return err
	}
	*x = ControllerReply_StatusCode(value)
	return nil
}

func (ControllerReply_StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14624816d88913d9, []int{0, 0}
}

type ControllerReply_Verification int32

const (
	ControllerReply_UNKNOWN_VERIFICATION ControllerReply_Verification = 0
	ControllerReply_VERIFIED             ControllerReply_Verification = 1
	ControllerReply_UNVERIFIED           ControllerReply_Verification = 2
)

var ControllerReply_Verification_name = map[int32]string{
	0: "UNKNOWN_VERIFICATION",
	1: "VERIFIED",
	2: "UNVERIFIED",
}

var ControllerReply_Verification_value = map[string]int32{
	"UNKNOWN_VERIFICATION": 0,
	"VERIFIED":             1,
	"UNVERIFIED":           2,
}

func (x ControllerReply_Verification) Enum() *ControllerReply_Verification {
	p := new(ControllerReply_Verification)
	*p = x
	return p
}

func (x ControllerReply_Verification) String() string {
	return proto.EnumName(ControllerReply_Verification_name, int32(x))
}

func (x *ControllerReply_Verification) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ControllerReply_Verification_value, data, "ControllerReply_Verification")
	if err != nil {
		return err
	}
	*x = ControllerReply_Verification(value)
	return nil
}

func (ControllerReply_Verification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14624816d88913d9, []int{0, 1}
}

// a reply that is sent by the controller for each request from teams or autoRefs
type ControllerReply struct {
	// status_code is an optional code that indicates the result of the last request
	StatusCode *ControllerReply_StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,enum=ControllerReply_StatusCode" json:"status_code,omitempty"`
	// reason is an optional explanation of the status code
	Reason *string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	// next_token must be send with the next request, if secure communication is used
	// the token is used to avoid replay attacks
	// the token is always present in the very first message before the registration starts
	// the token is not present, if secure communication is not used
	NextToken *string `protobuf:"bytes,3,opt,name=next_token,json=nextToken" json:"next_token,omitempty"`
	// verification indicates if the last request could be verified (secure communication)
	Verification         *ControllerReply_Verification `protobuf:"varint,4,opt,name=verification,enum=ControllerReply_Verification" json:"verification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ControllerReply) Reset()         { *m = ControllerReply{} }
func (m *ControllerReply) String() string { return proto.CompactTextString(m) }
func (*ControllerReply) ProtoMessage()    {}
func (*ControllerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_14624816d88913d9, []int{0}
}

func (m *ControllerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerReply.Unmarshal(m, b)
}
func (m *ControllerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerReply.Marshal(b, m, deterministic)
}
func (m *ControllerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerReply.Merge(m, src)
}
func (m *ControllerReply) XXX_Size() int {
	return xxx_messageInfo_ControllerReply.Size(m)
}
func (m *ControllerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerReply proto.InternalMessageInfo

func (m *ControllerReply) GetStatusCode() ControllerReply_StatusCode {
	if m != nil && m.StatusCode != nil {
		return *m.StatusCode
	}
	return ControllerReply_UNKNOWN_STATUS_CODE
}

func (m *ControllerReply) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

func (m *ControllerReply) GetNextToken() string {
	if m != nil && m.NextToken != nil {
		return *m.NextToken
	}
	return ""
}

func (m *ControllerReply) GetVerification() ControllerReply_Verification {
	if m != nil && m.Verification != nil {
		return *m.Verification
	}
	return ControllerReply_UNKNOWN_VERIFICATION
}

// Signature can be added to a request to let it be verfied by the controller
type Signature struct {
	// the token that was received with the last controller reply
	Token *string `protobuf:"bytes,1,req,name=token" json:"token,omitempty"`
	// the PKCS1v15 signature of this message
	Pkcs1V15             []byte   `protobuf:"bytes,2,req,name=pkcs1v15" json:"pkcs1v15,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_14624816d88913d9, []int{1}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *Signature) GetPkcs1V15() []byte {
	if m != nil {
		return m.Pkcs1V15
	}
	return nil
}

func init() {
	proto.RegisterEnum("ControllerReply_StatusCode", ControllerReply_StatusCode_name, ControllerReply_StatusCode_value)
	proto.RegisterEnum("ControllerReply_Verification", ControllerReply_Verification_name, ControllerReply_Verification_value)
	proto.RegisterType((*ControllerReply)(nil), "ControllerReply")
	proto.RegisterType((*Signature)(nil), "Signature")
}

func init() {
	proto.RegisterFile("ssl_gc_rcon.proto", fileDescriptor_14624816d88913d9)
}

var fileDescriptor_14624816d88913d9 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x51, 0xcf, 0x93, 0x30,
	0x18, 0x85, 0x3f, 0xaa, 0x2e, 0xe3, 0x95, 0x4c, 0xac, 0x8b, 0x12, 0xcd, 0x12, 0xc2, 0x15, 0x37,
	0x83, 0xcc, 0xc4, 0x2b, 0xa7, 0xc9, 0x64, 0x2c, 0x99, 0x33, 0x90, 0x14, 0x36, 0x13, 0x6f, 0x08,
	0x63, 0x15, 0xc9, 0x58, 0x4b, 0xda, 0xb2, 0xe8, 0x9f, 0xf4, 0x37, 0x19, 0x36, 0xc5, 0xe9, 0x77,
	0xd7, 0xe7, 0xf4, 0x9c, 0x9e, 0xb6, 0x2f, 0x3c, 0x95, 0xb2, 0xce, 0xca, 0x22, 0x13, 0x05, 0x67,
	0x5e, 0x23, 0xb8, 0xe2, 0xce, 0x4f, 0x04, 0x4f, 0x02, 0xce, 0x94, 0xe0, 0x75, 0x4d, 0x05, 0xa1,
	0x4d, 0xfd, 0x03, 0xcf, 0xe1, 0xb1, 0x54, 0xb9, 0x6a, 0x65, 0x56, 0xf0, 0x03, 0xb5, 0x34, 0x5b,
	0x73, 0x47, 0xaf, 0x5f, 0x79, 0xff, 0xd9, 0xbc, 0xe4, 0xe2, 0x09, 0xf8, 0x81, 0x12, 0x90, 0xfd,
	0x1a, 0x3f, 0x87, 0x81, 0xa0, 0xb9, 0xe4, 0xcc, 0x42, 0xb6, 0xe6, 0xea, 0xe4, 0x37, 0xe1, 0x09,
	0x00, 0xa3, 0xdf, 0x55, 0xa6, 0xf8, 0x91, 0x32, 0xeb, 0xc1, 0x65, 0x4f, 0xef, 0x94, 0xb4, 0x13,
	0xf0, 0x02, 0x8c, 0x33, 0x15, 0xd5, 0xd7, 0xaa, 0xc8, 0x55, 0xc5, 0x99, 0xf5, 0xf0, 0xd2, 0x3a,
	0xb9, 0xd7, 0xba, 0xbb, 0x31, 0x91, 0x7f, 0x22, 0xce, 0x5b, 0x80, 0xbf, 0x77, 0xc2, 0x2f, 0xe0,
	0xd9, 0x36, 0xda, 0x44, 0xf1, 0xe7, 0x28, 0x4b, 0xd2, 0x45, 0xba, 0x4d, 0xb2, 0x20, 0x5e, 0x86,
	0xe6, 0x1d, 0x1e, 0x00, 0x8a, 0x37, 0xa6, 0x86, 0x0d, 0x18, 0x92, 0xf0, 0x63, 0x18, 0xa4, 0xe1,
	0xd2, 0x44, 0xce, 0x0a, 0x8c, 0xdb, 0xa3, 0xb1, 0x05, 0xe3, 0x3f, 0xf1, 0x5d, 0x48, 0xd6, 0xab,
	0x75, 0xb0, 0x48, 0xd7, 0x71, 0x64, 0xde, 0x75, 0xb9, 0xab, 0x12, 0x2e, 0x4d, 0x0d, 0x8f, 0x00,
	0xb6, 0x51, 0xcf, 0xc8, 0x79, 0x07, 0x7a, 0x52, 0x95, 0x2c, 0x57, 0xad, 0xa0, 0x78, 0x0c, 0x8f,
	0xae, 0xcf, 0xd5, 0x6c, 0xe4, 0xea, 0xe4, 0x0a, 0xf8, 0x25, 0x0c, 0x9b, 0x63, 0x21, 0x67, 0xe7,
	0xd9, 0x1b, 0x0b, 0xd9, 0xc8, 0x35, 0x48, 0xcf, 0x1f, 0xde, 0x7f, 0x99, 0x97, 0x95, 0xfa, 0xd6,
	0xee, 0xbd, 0x82, 0x9f, 0x7c, 0xc2, 0xf7, 0x3c, 0x68, 0x9b, 0x69, 0x92, 0x7c, 0xf2, 0xa5, 0xac,
	0xa7, 0x65, 0x7e, 0xa2, 0xd3, 0xa2, 0xff, 0x11, 0xbf, 0x62, 0x8a, 0x0a, 0x96, 0xd7, 0x7e, 0xde,
	0x34, 0x7e, 0x37, 0xd5, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x45, 0x1e, 0xab, 0xe3, 0x01,
	0x00, 0x00,
}
