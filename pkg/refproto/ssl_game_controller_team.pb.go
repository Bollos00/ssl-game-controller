// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ssl_game_controller_team.proto

package refproto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TeamToController_AdvantageResponse int32

const (
	// no choice -> will default to STOP
	TeamToController_UNDECIDED TeamToController_AdvantageResponse = 0
	// stop the game and handle the foul immediately
	TeamToController_STOP TeamToController_AdvantageResponse = 0
	// continue the game until the next stop of the game, then handle the foul
	TeamToController_CONTINUE TeamToController_AdvantageResponse = 1
)

var TeamToController_AdvantageResponse_name = map[int32]string{
	0: "UNDECIDED",
	// Duplicate value: 0: "STOP",
	1: "CONTINUE",
}

var TeamToController_AdvantageResponse_value = map[string]int32{
	"UNDECIDED": 0,
	"STOP":      0,
	"CONTINUE":  1,
}

func (x TeamToController_AdvantageResponse) Enum() *TeamToController_AdvantageResponse {
	p := new(TeamToController_AdvantageResponse)
	*p = x
	return p
}

func (x TeamToController_AdvantageResponse) String() string {
	return proto.EnumName(TeamToController_AdvantageResponse_name, int32(x))
}

func (x *TeamToController_AdvantageResponse) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TeamToController_AdvantageResponse_value, data, "TeamToController_AdvantageResponse")
	if err != nil {
		return err
	}
	*x = TeamToController_AdvantageResponse(value)
	return nil
}

func (TeamToController_AdvantageResponse) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96c0c3d07dcb3676, []int{1, 0}
}

type AdvantageChoice_Foul int32

const (
	// default value when not set
	AdvantageChoice_UNKNOWN AdvantageChoice_Foul = 0
	// an opponent bot has crashed with one of your bots
	AdvantageChoice_COLLISION AdvantageChoice_Foul = 1
	// an opponent bot has pushed one of your bots
	AdvantageChoice_PUSHING AdvantageChoice_Foul = 2
)

var AdvantageChoice_Foul_name = map[int32]string{
	0: "UNKNOWN",
	1: "COLLISION",
	2: "PUSHING",
}

var AdvantageChoice_Foul_value = map[string]int32{
	"UNKNOWN":   0,
	"COLLISION": 1,
	"PUSHING":   2,
}

func (x AdvantageChoice_Foul) Enum() *AdvantageChoice_Foul {
	p := new(AdvantageChoice_Foul)
	*p = x
	return p
}

func (x AdvantageChoice_Foul) String() string {
	return proto.EnumName(AdvantageChoice_Foul_name, int32(x))
}

func (x *AdvantageChoice_Foul) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdvantageChoice_Foul_value, data, "AdvantageChoice_Foul")
	if err != nil {
		return err
	}
	*x = AdvantageChoice_Foul(value)
	return nil
}

func (AdvantageChoice_Foul) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96c0c3d07dcb3676, []int{3, 0}
}

// a registration that must be send by teams and autoRefs to the controller as the very first message
type TeamRegistration struct {
	// the exact team name as published by the game-controller
	TeamName *string `protobuf:"bytes,1,req,name=team_name,json=teamName" json:"team_name,omitempty"`
	// signature can optionally be specified to enable secure communication
	Signature            *Signature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TeamRegistration) Reset()         { *m = TeamRegistration{} }
func (m *TeamRegistration) String() string { return proto.CompactTextString(m) }
func (*TeamRegistration) ProtoMessage()    {}
func (*TeamRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c0c3d07dcb3676, []int{0}
}

func (m *TeamRegistration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamRegistration.Unmarshal(m, b)
}
func (m *TeamRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamRegistration.Marshal(b, m, deterministic)
}
func (m *TeamRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamRegistration.Merge(m, src)
}
func (m *TeamRegistration) XXX_Size() int {
	return xxx_messageInfo_TeamRegistration.Size(m)
}
func (m *TeamRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_TeamRegistration proto.InternalMessageInfo

func (m *TeamRegistration) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *TeamRegistration) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

// wrapper for all messages from a team's computer to the controller
type TeamToController struct {
	// signature can optionally be specified to enable secure communication
	Signature *Signature `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	// Types that are valid to be assigned to Msg:
	//	*TeamToController_DesiredKeeper
	//	*TeamToController_AdvantageResponse_
	//	*TeamToController_SubstituteBot
	//	*TeamToController_Ping
	Msg                  isTeamToController_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TeamToController) Reset()         { *m = TeamToController{} }
func (m *TeamToController) String() string { return proto.CompactTextString(m) }
func (*TeamToController) ProtoMessage()    {}
func (*TeamToController) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c0c3d07dcb3676, []int{1}
}

func (m *TeamToController) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamToController.Unmarshal(m, b)
}
func (m *TeamToController) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamToController.Marshal(b, m, deterministic)
}
func (m *TeamToController) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamToController.Merge(m, src)
}
func (m *TeamToController) XXX_Size() int {
	return xxx_messageInfo_TeamToController.Size(m)
}
func (m *TeamToController) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamToController.DiscardUnknown(m)
}

var xxx_messageInfo_TeamToController proto.InternalMessageInfo

func (m *TeamToController) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type isTeamToController_Msg interface {
	isTeamToController_Msg()
}

type TeamToController_DesiredKeeper struct {
	DesiredKeeper int32 `protobuf:"varint,2,opt,name=desired_keeper,json=desiredKeeper,oneof"`
}

type TeamToController_AdvantageResponse_ struct {
	AdvantageResponse TeamToController_AdvantageResponse `protobuf:"varint,3,opt,name=advantage_response,json=advantageResponse,enum=TeamToController_AdvantageResponse,oneof"`
}

type TeamToController_SubstituteBot struct {
	SubstituteBot bool `protobuf:"varint,4,opt,name=substitute_bot,json=substituteBot,oneof"`
}

type TeamToController_Ping struct {
	Ping bool `protobuf:"varint,5,opt,name=ping,oneof"`
}

func (*TeamToController_DesiredKeeper) isTeamToController_Msg() {}

func (*TeamToController_AdvantageResponse_) isTeamToController_Msg() {}

func (*TeamToController_SubstituteBot) isTeamToController_Msg() {}

func (*TeamToController_Ping) isTeamToController_Msg() {}

func (m *TeamToController) GetMsg() isTeamToController_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *TeamToController) GetDesiredKeeper() int32 {
	if x, ok := m.GetMsg().(*TeamToController_DesiredKeeper); ok {
		return x.DesiredKeeper
	}
	return 0
}

func (m *TeamToController) GetAdvantageResponse() TeamToController_AdvantageResponse {
	if x, ok := m.GetMsg().(*TeamToController_AdvantageResponse_); ok {
		return x.AdvantageResponse
	}
	return TeamToController_UNDECIDED
}

func (m *TeamToController) GetSubstituteBot() bool {
	if x, ok := m.GetMsg().(*TeamToController_SubstituteBot); ok {
		return x.SubstituteBot
	}
	return false
}

func (m *TeamToController) GetPing() bool {
	if x, ok := m.GetMsg().(*TeamToController_Ping); ok {
		return x.Ping
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TeamToController) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TeamToController_DesiredKeeper)(nil),
		(*TeamToController_AdvantageResponse_)(nil),
		(*TeamToController_SubstituteBot)(nil),
		(*TeamToController_Ping)(nil),
	}
}

// wrapper for all messages from controller to a team's computer
type ControllerToTeam struct {
	// Types that are valid to be assigned to Msg:
	//	*ControllerToTeam_ControllerReply
	//	*ControllerToTeam_AdvantageChoice
	Msg                  isControllerToTeam_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ControllerToTeam) Reset()         { *m = ControllerToTeam{} }
func (m *ControllerToTeam) String() string { return proto.CompactTextString(m) }
func (*ControllerToTeam) ProtoMessage()    {}
func (*ControllerToTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c0c3d07dcb3676, []int{2}
}

func (m *ControllerToTeam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerToTeam.Unmarshal(m, b)
}
func (m *ControllerToTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerToTeam.Marshal(b, m, deterministic)
}
func (m *ControllerToTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerToTeam.Merge(m, src)
}
func (m *ControllerToTeam) XXX_Size() int {
	return xxx_messageInfo_ControllerToTeam.Size(m)
}
func (m *ControllerToTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerToTeam.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerToTeam proto.InternalMessageInfo

type isControllerToTeam_Msg interface {
	isControllerToTeam_Msg()
}

type ControllerToTeam_ControllerReply struct {
	ControllerReply *ControllerReply `protobuf:"bytes,1,opt,name=controller_reply,json=controllerReply,oneof"`
}

type ControllerToTeam_AdvantageChoice struct {
	AdvantageChoice *AdvantageChoice `protobuf:"bytes,2,opt,name=advantage_choice,json=advantageChoice,oneof"`
}

func (*ControllerToTeam_ControllerReply) isControllerToTeam_Msg() {}

func (*ControllerToTeam_AdvantageChoice) isControllerToTeam_Msg() {}

func (m *ControllerToTeam) GetMsg() isControllerToTeam_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ControllerToTeam) GetControllerReply() *ControllerReply {
	if x, ok := m.GetMsg().(*ControllerToTeam_ControllerReply); ok {
		return x.ControllerReply
	}
	return nil
}

func (m *ControllerToTeam) GetAdvantageChoice() *AdvantageChoice {
	if x, ok := m.GetMsg().(*ControllerToTeam_AdvantageChoice); ok {
		return x.AdvantageChoice
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControllerToTeam) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControllerToTeam_ControllerReply)(nil),
		(*ControllerToTeam_AdvantageChoice)(nil),
	}
}

// information about the advantage choice that is offered to a team
type AdvantageChoice struct {
	// the type of foul that occurred
	Foul *AdvantageChoice_Foul `protobuf:"varint,1,req,name=foul,enum=AdvantageChoice_Foul" json:"foul,omitempty"`
	// the bot crash event that was the source for this advantage choice
	BotCrashUnique *GameEvent_BotCrashUnique `protobuf:"bytes,2,opt,name=bot_crash_unique,json=botCrashUnique" json:"bot_crash_unique,omitempty"`
	// the bot push event that was the source for this advantage choice
	BotPushedBot         *GameEvent_BotPushedBot `protobuf:"bytes,3,opt,name=bot_pushed_bot,json=botPushedBot" json:"bot_pushed_bot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AdvantageChoice) Reset()         { *m = AdvantageChoice{} }
func (m *AdvantageChoice) String() string { return proto.CompactTextString(m) }
func (*AdvantageChoice) ProtoMessage()    {}
func (*AdvantageChoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_96c0c3d07dcb3676, []int{3}
}

func (m *AdvantageChoice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvantageChoice.Unmarshal(m, b)
}
func (m *AdvantageChoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvantageChoice.Marshal(b, m, deterministic)
}
func (m *AdvantageChoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvantageChoice.Merge(m, src)
}
func (m *AdvantageChoice) XXX_Size() int {
	return xxx_messageInfo_AdvantageChoice.Size(m)
}
func (m *AdvantageChoice) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvantageChoice.DiscardUnknown(m)
}

var xxx_messageInfo_AdvantageChoice proto.InternalMessageInfo

func (m *AdvantageChoice) GetFoul() AdvantageChoice_Foul {
	if m != nil && m.Foul != nil {
		return *m.Foul
	}
	return AdvantageChoice_UNKNOWN
}

func (m *AdvantageChoice) GetBotCrashUnique() *GameEvent_BotCrashUnique {
	if m != nil {
		return m.BotCrashUnique
	}
	return nil
}

func (m *AdvantageChoice) GetBotPushedBot() *GameEvent_BotPushedBot {
	if m != nil {
		return m.BotPushedBot
	}
	return nil
}

func init() {
	proto.RegisterEnum("TeamToController_AdvantageResponse", TeamToController_AdvantageResponse_name, TeamToController_AdvantageResponse_value)
	proto.RegisterEnum("AdvantageChoice_Foul", AdvantageChoice_Foul_name, AdvantageChoice_Foul_value)
	proto.RegisterType((*TeamRegistration)(nil), "TeamRegistration")
	proto.RegisterType((*TeamToController)(nil), "TeamToController")
	proto.RegisterType((*ControllerToTeam)(nil), "ControllerToTeam")
	proto.RegisterType((*AdvantageChoice)(nil), "AdvantageChoice")
}

func init() { proto.RegisterFile("ssl_game_controller_team.proto", fileDescriptor_96c0c3d07dcb3676) }

var fileDescriptor_96c0c3d07dcb3676 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xed, 0x34, 0xd1, 0x2f, 0x99, 0xb6, 0xe9, 0x76, 0xf5, 0x43, 0xa4, 0x45, 0x42, 0x51,
	0x38, 0x10, 0x2e, 0x06, 0x72, 0xe3, 0x50, 0x24, 0xe2, 0x84, 0x26, 0x6a, 0xe5, 0x44, 0x1b, 0x47,
	0x88, 0xd3, 0x6a, 0xe3, 0x0c, 0x8e, 0x85, 0xed, 0x35, 0xde, 0x75, 0x25, 0x9e, 0x84, 0xe7, 0xe1,
	0x91, 0x78, 0x03, 0xb4, 0x6e, 0x52, 0x37, 0x01, 0x71, 0x9c, 0xcf, 0xf7, 0x3b, 0x7f, 0x76, 0x66,
	0xe1, 0xb9, 0x52, 0x31, 0x0f, 0x45, 0x82, 0x3c, 0x90, 0xa9, 0xce, 0x65, 0x1c, 0x63, 0xce, 0x35,
	0x8a, 0xc4, 0xc9, 0x72, 0xa9, 0xe5, 0xe5, 0xc5, 0x83, 0x8e, 0x77, 0x98, 0x6a, 0x3e, 0x78, 0xf3,
	0xf6, 0xdd, 0x56, 0xea, 0xfe, 0x2d, 0x35, 0x90, 0x49, 0x22, 0xd3, 0x7b, 0x47, 0xef, 0x33, 0x10,
	0x1f, 0x45, 0xc2, 0x30, 0x8c, 0x94, 0xce, 0x85, 0x8e, 0x64, 0x4a, 0x9f, 0x41, 0xcb, 0x94, 0xe7,
	0xa9, 0x48, 0xb0, 0x63, 0x77, 0x6b, 0xfd, 0x16, 0x6b, 0x1a, 0xe0, 0x89, 0x04, 0x69, 0x1f, 0x5a,
	0x2a, 0x0a, 0x53, 0xa1, 0x8b, 0x1c, 0x3b, 0xb5, 0xae, 0xdd, 0x3f, 0x1e, 0x80, 0xb3, 0xd8, 0x11,
	0x56, 0x89, 0xbd, 0x9f, 0xb5, 0xfb, 0xda, 0xbe, 0x74, 0x1f, 0x9a, 0xef, 0xa7, 0xdb, 0xff, 0x48,
	0xa7, 0x2f, 0xa1, 0xbd, 0x46, 0x15, 0xe5, 0xb8, 0xe6, 0x5f, 0x11, 0x33, 0xcc, 0xcb, 0x6e, 0x8d,
	0x89, 0xc5, 0x4e, 0xb7, 0xfc, 0xa6, 0xc4, 0xd4, 0x07, 0x2a, 0xd6, 0x77, 0x22, 0xd5, 0x22, 0x44,
	0x9e, 0xa3, 0xca, 0x64, 0xaa, 0xb0, 0x73, 0xd4, 0xb5, 0xfb, 0xed, 0xc1, 0x0b, 0xe7, 0x70, 0x02,
	0xe7, 0xc3, 0xce, 0xcb, 0xb6, 0xd6, 0x89, 0xc5, 0xce, 0xc5, 0x21, 0x34, 0xed, 0x55, 0xb1, 0x52,
	0x3a, 0xd2, 0x85, 0x46, 0xbe, 0x92, 0xba, 0x53, 0xef, 0xda, 0xfd, 0xa6, 0x69, 0x5f, 0xf1, 0xa1,
	0xd4, 0xf4, 0x7f, 0xa8, 0x67, 0x51, 0x1a, 0x76, 0x1a, 0x5b, 0xb9, 0x8c, 0x7a, 0xef, 0xe1, 0xfc,
	0x8f, 0x46, 0xf4, 0x14, 0x5a, 0x4b, 0x6f, 0x34, 0x76, 0xa7, 0xa3, 0xf1, 0x88, 0x58, 0xb4, 0x09,
	0xf5, 0x85, 0x3f, 0x9b, 0x13, 0x8b, 0x9e, 0x40, 0xd3, 0x9d, 0x79, 0xfe, 0xd4, 0x5b, 0x8e, 0x89,
	0x7d, 0x59, 0x23, 0xf6, 0xb0, 0x01, 0x47, 0x89, 0x0a, 0x7b, 0x3f, 0x6c, 0x20, 0xd5, 0xec, 0xbe,
	0x34, 0xaf, 0xa1, 0x57, 0x40, 0x1e, 0x9d, 0x33, 0xc7, 0x2c, 0xfe, 0xbe, 0x5d, 0x25, 0x71, 0x2a,
	0x33, 0x33, 0x7c, 0x62, 0xb1, 0xb3, 0x60, 0x1f, 0x99, 0xf4, 0x6a, 0x5f, 0xc1, 0x46, 0x46, 0xc1,
	0xee, 0x90, 0xa4, 0x5a, 0x8e, 0x5b, 0x72, 0x93, 0x2e, 0xf6, 0xd1, 0x6e, 0xb2, 0x5f, 0x36, 0x9c,
	0x1d, 0xb8, 0xe9, 0x2b, 0xa8, 0x7f, 0x91, 0x45, 0x5c, 0xfe, 0x99, 0xf6, 0xe0, 0xc9, 0x61, 0x35,
	0xe7, 0xa3, 0x2c, 0x62, 0x56, 0x5a, 0xa8, 0x0b, 0x64, 0x25, 0x35, 0x0f, 0x72, 0xa1, 0x36, 0xbc,
	0x48, 0xa3, 0x6f, 0xc5, 0x6e, 0x88, 0x0b, 0xe7, 0x5a, 0x24, 0x38, 0x36, 0x5f, 0xd9, 0x19, 0x4a,
	0xed, 0x1a, 0xc7, 0xb2, 0x34, 0xb0, 0xf6, 0x6a, 0x2f, 0xa6, 0x57, 0x60, 0x08, 0xcf, 0x0a, 0xb5,
	0xc1, 0x75, 0x79, 0xa3, 0xa3, 0xb2, 0xc4, 0xd3, 0xfd, 0x12, 0xf3, 0x52, 0x1f, 0x4a, 0xcd, 0x4e,
	0x56, 0x8f, 0xa2, 0xde, 0x6b, 0xa8, 0x9b, 0x89, 0xe8, 0x31, 0xfc, 0xb7, 0xf4, 0x6e, 0xbc, 0xd9,
	0x27, 0x8f, 0x58, 0xe6, 0x46, 0xee, 0xec, 0xf6, 0x76, 0xba, 0x98, 0xce, 0x3c, 0x62, 0x1b, 0x6d,
	0xbe, 0x5c, 0x4c, 0xa6, 0xde, 0x35, 0xa9, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x07, 0xd5, 0x33,
	0xd3, 0x8a, 0x03, 0x00, 0x00,
}
