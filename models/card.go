// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Card card
// swagger:model Card
type Card struct {

	// for team
	// Enum: [yellow blue]
	ForTeam string `json:"forTeam,omitempty"`

	// kind
	// Enum: [yellow red]
	Kind string `json:"kind,omitempty"`
}

// Validate validates this card
func (m *Card) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cardTypeForTeamPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yellow","blue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardTypeForTeamPropEnum = append(cardTypeForTeamPropEnum, v)
	}
}

const (

	// CardForTeamYellow captures enum value "yellow"
	CardForTeamYellow string = "yellow"

	// CardForTeamBlue captures enum value "blue"
	CardForTeamBlue string = "blue"
)

// prop value enum
func (m *Card) validateForTeamEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cardTypeForTeamPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Card) validateForTeam(formats strfmt.Registry) error {

	if swag.IsZero(m.ForTeam) { // not required
		return nil
	}

	// value enum
	if err := m.validateForTeamEnum("forTeam", "body", m.ForTeam); err != nil {
		return err
	}

	return nil
}

var cardTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yellow","red"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardTypeKindPropEnum = append(cardTypeKindPropEnum, v)
	}
}

const (

	// CardKindYellow captures enum value "yellow"
	CardKindYellow string = "yellow"

	// CardKindRed captures enum value "red"
	CardKindRed string = "red"
)

// prop value enum
func (m *Card) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cardTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Card) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Card) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Card) UnmarshalBinary(b []byte) error {
	var res Card
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
