syntax = "proto2";

import "ssl_game_controller_common.proto";

// GameEvent contains exactly one game event
// Each game event has optional and required fields. The required fields are mandatory to process the event.
// Some optional fields are only used for visualization, others are required to determine the ball placement position.
// If fields are missing that are required for the ball placement position, no ball placement command will be issued.
// Fields are marked optional to make testing and extending of the protocol easier.
// An autoRef should ideally set all fields, except if there are good reasons to not do so.
message GameEvent {

    required GameEventType type = 40;

    // the origins of this game event
    // empty, if it originates from game controller
    // autoRef name(s), if it originates from one or more autoRefs
    // ignored if sent by autoRef to game controller
    repeated string origin = 41;

    // the event that occurred
    oneof event {

        // Match proceeding events (not sent by autoRefs)

        Prepared prepared = 1 [deprecated = true]; // replaced by ready_to_continue flag
        PlacementFailed placement_failed = 3; // replaced by ready_to_continue flag (sent by GC only)
        PlacementSucceeded placement_succeeded = 5; // replaced by ready_to_continue flag (sent by GC only)
        BotSubstitution bot_substitution = 37 [deprecated = true]; // remove, keep the flags in the referee msg active until substitution is over
        TooManyRobots too_many_robots = 38; // replaced by number of robots in GameStateMetaData message (sent by GC only)

        // Ball out of field events (stopping)

        BallLeftField ball_left_field_touch_line = 6;
        BallLeftField ball_left_field_goal_line = 7;
        AimlessKick aimless_kick = 11; // converted to ball_left_field_goal_line by GC for DivA
        Goal possible_goal = 39;
        Goal goal = 8; // sent by GC only
        IndirectGoal indirect_goal = 9 [deprecated = true]; // obsolete
        ChippedGoal chipped_goal = 10;

        // Non-Foul Violations

        KickTimeout kick_timeout = 12 [deprecated = true]; // obsolete
        NoProgressInGame no_progress_in_game = 2;
        AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
        MultipleCards multiple_cards = 32; // sent by GC only
        MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true]; // remove, the referee msg already indicates this
        MultipleFouls multiple_fouls = 34; // sent by GC only

        // Stopping Fouls

        AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
        BotPushedBot bot_pushed_bot = 24; // only called manually by the human ref
        BotPushedBot bot_pushed_bot_skipped = 25; // can not be used as long as autoRefs do not judge pushing
        BotHeldBallDeliberately bot_held_ball_deliberately = 26;
        BotTippedOver bot_tipped_over = 27; // only called manually by the human ref
        DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30;
        DefenderInDefenseArea defender_in_defense_area = 31;
        BoundaryCrossing boundary_crossing = 43;
        KeeperHeldBall keeper_held_ball = 13;

        // Non-Stopping Fouls

        AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
        BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
        BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
        AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16;
        AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true]; // obsolete
        BotCrashUnique bot_crash_unique = 22;
        BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true]; // obsolete
        BotCrashDrawn bot_crash_drawn = 21;

        // Fouls while ball out of play

        DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
        BotTooFastInStop bot_too_fast_in_stop = 28;
        BotInterferedPlacement bot_interfered_placement = 20;

        // Unsporting behavior events (only sent by GC)

        UnsportingBehaviorMinor unsporting_behavior_minor = 35;
        UnsportingBehaviorMajor unsporting_behavior_major = 36;
    }

    // the ball left the field normally
    message BallLeftField {
        // the team that last touched the ball
        required Team by_team = 1;
        // the bot that last touched the ball
        optional uint32 by_bot = 2;
        // the location where the ball left the field
        optional Location location = 3;
    }
    // the ball left the field via goal line and a team committed an aimless kick
    message AimlessKick {
        // the team that last touched the ball
        required Team by_team = 1;
        // the bot that last touched the ball
        optional uint32 by_bot = 2;
        // the location where the ball left the field
        optional Location location = 3;
        // the location where the ball was last touched
        optional Location kick_location = 4;
    }
    // a team shot a goal
    message Goal {
        // the team that scored the goal
        required Team by_team = 1;
        // the team that shot the goal (different from by_team for own goals)
        optional Team kicking_team = 6;
        // the bot that shot the goal
        optional uint32 kicking_bot = 2;
        // the location where the ball entered the goal
        optional Location location = 3;
        // the location where the ball was kicked
        optional Location kick_location = 4;
    }
    // the ball entered the goal directly during an indirect free kick
    message IndirectGoal {
        // the team that tried to shoot the goal
        required Team by_team = 1;
        // the bot that kicked the ball - at least the team must be set
        optional uint32 by_bot = 2;
        // the location where the ball entered the goal
        optional Location location = 3;
        // the location where the ball was kicked
        optional Location kick_location = 4;
    }
    // the ball entered the goal, but was initially chipped
    message ChippedGoal {
        // the team that tried to shoot the goal
        required Team by_team = 1;
        // the bot that kicked the ball
        optional uint32 by_bot = 2;
        // the location where the ball entered the goal
        optional Location location = 3;
        // the location where the ball was kicked
        optional Location kick_location = 4;
        // the maximum height [m] of the ball, before it entered the goal and since the last kick
        optional float max_ball_height = 5;
    }
    // a bot moved too fast while the game was stopped
    message BotTooFastInStop {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that was too fast
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
        // the bot speed [m/s]
        optional float speed = 4;
    }
    // a bot of the defending team got too close to the kick point during a free kick
    message DefenderTooCloseToKickPoint {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that violates the distance to the kick point
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
        // the distance [m] from bot to the kick point (including the minimum radius)
        optional float distance = 4;
    }
    // two robots crashed into each other with similar speeds
    message BotCrashDrawn {
        // the bot of the yellow team
        optional uint32 bot_yellow = 1;
        // the bot of the blue team
        optional uint32 bot_blue = 2;
        // the location of the crash (center between both bots)
        optional Location location = 3;
        // the calculated crash speed [m/s] of the two bots
        optional float crash_speed = 4;
        // the difference [m/s] of the velocity of the two bots
        optional float speed_diff = 5;
        // the angle [rad] in the range [0, π] of the bot velocity vectors
        // an angle of 0 rad (  0°) means, the bots barely touched each other
        // an angle of π rad (180°) means, the bots crashed frontal into each other
        optional float crash_angle = 6;
    }
    // two robots crashed into each other and one team was found guilty to due significant speed difference
    message BotCrashUnique {
        // the team that caused the crash
        required Team by_team = 1;
        // the bot that caused the crash
        optional uint32 violator = 2;
        // the bot of the opposite team that was involved in the crash
        optional uint32 victim = 3;
        // the location of the crash (center between both bots)
        optional Location location = 4;
        // the calculated crash speed vector [m/s] of the two bots
        optional float crash_speed = 5;
        // the difference [m/s] of the velocity of the two bots
        optional float speed_diff = 6;
        // the angle [rad] in the range [0, π] of the bot velocity vectors
        // an angle of 0 rad (  0°) means, the bots barely touched each other
        // an angle of π rad (180°) means, the bots crashed frontal into each other
        optional float crash_angle = 7;
    }
    // a bot pushed another bot over a significant distance
    message BotPushedBot {
        // the team that pushed the other team
        required Team by_team = 1;
        // the bot that pushed the other bot
        optional uint32 violator = 2;
        // the bot of the opposite team that was pushed
        optional uint32 victim = 3;
        // the location of the push (center between both bots)
        optional Location location = 4;
        // the pushed distance [m]
        optional float pushed_distance = 5;
    }
    // a bot tipped over
    message BotTippedOver {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that tipped over
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
        // the location of the ball at the moment when this foul occurred
        optional Location ball_location = 4;
    }
    // a defender other than the keeper was fully located inside its own defense and touched the ball
    message DefenderInDefenseArea {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that is inside the penalty area
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
        // the distance [m] from bot case to the nearest point outside the defense area
        optional float distance = 4;
    }
    // a defender other than the keeper was partially located inside its own defense area and touched the ball
    message DefenderInDefenseAreaPartially {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that is partially inside the penalty area
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
        // the distance [m] that the bot is inside the penalty area
        optional float distance = 4;
        // the location of the ball at the moment when this foul occurred
        optional Location ball_location = 5;
    }
    // an attacker touched the ball inside the opponent defense area
    message AttackerTouchedBallInDefenseArea {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that is inside the penalty area
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
        // the distance [m] that the bot is inside the penalty area
        optional float distance = 4;
    }
    // a bot kicked the ball too fast
    message BotKickedBallTooFast {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that kicked too fast
        optional uint32 by_bot = 2;
        // the location of the ball at the time of the highest speed
        optional Location location = 3;
        // the absolute initial ball speed (kick speed) [m/s]
        optional float initial_ball_speed = 4;
        // was the ball chipped?
        optional bool chipped = 5;
    }
    // a bot dribbled to ball too far
    message BotDribbledBallTooFar {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that dribbled too far
        optional uint32 by_bot = 2;
        // the location where the dribbling started
        optional Location start = 3;
        // the location where the maximum dribbling distance was reached
        optional Location end = 4;
    }
    // an attacker touched the opponent robot inside defense area
    message AttackerTouchedOpponentInDefenseArea {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that touched the opponent robot
        optional uint32 by_bot = 2;
        // the bot of the opposite team that was touched
        optional uint32 victim = 4;
        // the location of the contact point between both bots
        optional Location location = 3;
    }
    // an attacker touched the ball multiple times when it was not allowed to
    message AttackerDoubleTouchedBall {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that touched the ball twice
        optional uint32 by_bot = 2;
        // the location of the ball when it was first touched
        optional Location location = 3;
    }
    // an attacker was located too near to the opponent defense area during stop or free kick
    message AttackerTooCloseToDefenseArea {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that is too close to the defense area
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
        // the distance [m] of the bot to the penalty area
        optional float distance = 4;
        // the location of the ball at the moment when this foul occurred
        optional Location ball_location = 5;
    }
    // a bot held the ball for too long
    message BotHeldBallDeliberately {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that holds the ball
        optional uint32 by_bot = 2;
        // the location of the ball
        optional Location location = 3;
        // the duration [s] that the bot hold the ball
        optional float duration = 4;
    }
    // a bot interfered the ball placement of the other team
    message BotInterferedPlacement {
        // the team that found guilty
        required Team by_team = 1;
        // the bot that interfered the placement
        optional uint32 by_bot = 2;
        // the location of the bot
        optional Location location = 3;
    }
    // a team collected multiple cards (yellow and red), which results in a penalty kick
    message MultipleCards {
        // the team that received multiple yellow cards
        required Team by_team = 1;
    }
    // a team collected multiple fouls, which results in a yellow card
    message MultipleFouls {
        // the team that collected multiple fouls
        required Team by_team = 1;
    }
    // a team failed to place the ball multiple times in a row
    message MultiplePlacementFailures {
        // the team that failed multiple times
        required Team by_team = 1;
    }
    // timeout waiting for the attacking team to perform the free kick
    message KickTimeout {
        // the team that that should have kicked
        required Team by_team = 1;
        // the location of the ball
        optional Location location = 2;
        // the time [s] that was waited
        optional float time = 3;
    }
    // game was stuck
    message NoProgressInGame {
        // the location of the ball
        optional Location location = 1;
        // the time [s] that was waited
        optional float time = 2;
    }
    // ball placement failed
    message PlacementFailed {
        // the team that failed
        required Team by_team = 1;
        // the remaining distance [m] from ball to placement position
        optional float remaining_distance = 2;
    }
    // a team was found guilty for minor unsporting behavior
    message UnsportingBehaviorMinor {
        // the team that found guilty
        required Team by_team = 1;
        // an explanation of the situation and decision
        required string reason = 2;
    }
    // a team was found guilty for major unsporting behavior
    message UnsportingBehaviorMajor {
        // the team that found guilty
        required Team by_team = 1;
        // an explanation of the situation and decision
        required string reason = 2;
    }
    // a keeper held the ball in its defense area for too long
    message KeeperHeldBall {
        // the team that found guilty
        required Team by_team = 1;
        // the location of the ball
        optional Location location = 2;
        // the duration [s] that the keeper hold the ball
        optional float duration = 3;
    }
    // a team successfully placed the ball
    message PlacementSucceeded {
        // the team that did the placement
        required Team by_team = 1;
        // the time [s] taken for placing the ball
        optional float time_taken = 2;
        // the distance [m] between placement location and actual ball position
        optional float precision = 3;
        // the distance [m] between the initial ball location and the placement position
        optional float distance = 4;
    }
    // both teams are prepared - all conditions are met to continue (with kickoff or penalty kick)
    message Prepared {
        // the time [s] taken for preparing
        optional float time_taken = 1;
    }
    // bots are being substituted by at least one team
    message BotSubstitution {
        // the team that substitutes robots
        required Team by_team = 1;
    }
    // a team has too many robots on the field
    message TooManyRobots {
        // the team that has too many robots
        required Team by_team = 1;
    }
    // a robot chipped the ball over the field boundary out of the playing surface
    message BoundaryCrossing {
        // the team that has too many robots
        required Team by_team = 1;
        // the location of the ball
        optional Location location = 2;
    }
}

enum GameEventType {
    UNKNOWN_GAME_EVENT_TYPE = 0;

    PREPARED = 1;
    NO_PROGRESS_IN_GAME = 2;
    PLACEMENT_FAILED = 3;
    PLACEMENT_SUCCEEDED = 5;
    BOT_SUBSTITUTION = 37;
    TOO_MANY_ROBOTS = 38;
    BALL_LEFT_FIELD_TOUCH_LINE = 6;
    BALL_LEFT_FIELD_GOAL_LINE = 7;
    POSSIBLE_GOAL = 39;
    GOAL = 8;
    INDIRECT_GOAL = 9;
    CHIPPED_GOAL = 10;
    AIMLESS_KICK = 11;
    KICK_TIMEOUT = 12;
    KEEPER_HELD_BALL = 13;
    ATTACKER_DOUBLE_TOUCHED_BALL = 14;
    ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA = 15;
    ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA = 16;
    ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED = 40;
    BOT_DRIBBLED_BALL_TOO_FAR = 17;
    BOT_KICKED_BALL_TOO_FAST = 18;
    ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA = 19;
    BOT_INTERFERED_PLACEMENT = 20;
    BOT_CRASH_DRAWN = 21;
    BOT_CRASH_UNIQUE = 22;
    BOT_CRASH_UNIQUE_SKIPPED = 23;
    BOT_PUSHED_BOT = 24;
    BOT_PUSHED_BOT_SKIPPED = 25;
    BOT_HELD_BALL_DELIBERATELY = 26;
    BOT_TIPPED_OVER = 27;
    BOT_TOO_FAST_IN_STOP = 28;
    DEFENDER_TOO_CLOSE_TO_KICK_POINT = 29;
    DEFENDER_IN_DEFENSE_AREA_PARTIALLY = 30;
    DEFENDER_IN_DEFENSE_AREA = 31;
    MULTIPLE_CARDS = 32;
    MULTIPLE_PLACEMENT_FAILURES = 33;
    MULTIPLE_FOULS = 34;
    UNSPORTING_BEHAVIOR_MINOR = 35;
    UNSPORTING_BEHAVIOR_MAJOR = 36;
    BOUNDARY_CROSSING = 41;
}
