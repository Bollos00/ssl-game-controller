syntax = "proto2";

option go_package = "github.com/RoboCup-SSL/ssl-game-controller/internal/app/engine";

import "ssl_gc_geometry.proto";
import "ssl_game_event.proto";

message GcState {
    map<string, GcStateTeam> team_state = 1;
    map<string, GcStateAutoRef> auto_ref_state = 2;
    map<string, GcStateTracker> tracker_state = 3;
    optional GcStateTracker tracker_state_gc = 4;
}

message GcStateTeam {
    // true: The team is connected
    optional bool connected = 1;

    // true: The team connected via TLS with a verified certificate
    optional bool connection_verified = 2;
}

message GcStateAutoRef {
    // true: The autoRef connected via TLS with a verified certificate
    optional bool connection_verified = 1;

    // if current state is prepare_kickoff, prepare_penalty, stop or ball_placement:
    // true: all conditions are met to continue from the current state
    // false: at least one condition not met yet
    // not present: not supported by the autoRef
    // else:
    // undefined
    optional bool ready_to_continue = 2;

    // if current state is stop:
    // true: ball placement not required, can directly continue
    // false: need to initiate ball placement
    // if current state is ball placement:
    // true: ball placement done, all conditions met
    // false: ball not yet placed successfully
    optional bool ball_placed = 3;

    // UNIX timestamp [Î¼s] when the ball last moved
    // Used by the GC to determine if there is still progress
    optional uint64 last_progress = 4;

    // map team -> team specific state
    map<string, GcStateAutoRefTeam> team_state = 5;
}

message GcStateAutoRefTeam {
    // Number of robots currently on the field
    optional uint32 number_of_robots = 1;

    // When the ball is in play, this flag indicates, if this team may change the keeper in confirmation with the rules
    optional bool may_change_keeper = 2;
}

message GcStateTracker {
    // Current ball
    optional Ball ball = 1;

    // Current robots
    repeated Robot robots = 2;
}

message Ball {
    // ball position [m]
    optional Vector2 pos = 1;

    // ball velocity [m/s]
    optional Vector2 vel = 2;
}

message Robot {
    // robot id and team
    optional BotId id = 1;

    // robot position [m]
    optional Vector2 pos = 2;
}
