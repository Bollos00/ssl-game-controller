// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: ssl_gc_state.proto

package state

import (
	geom "github.com/RoboCup-SSL/ssl-game-controller/internal/app/geom"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Command_Type int32

const (
	Command_UNKNOWN        Command_Type = 0
	Command_HALT           Command_Type = 1
	Command_STOP           Command_Type = 2
	Command_NORMAL_START   Command_Type = 3
	Command_FORCE_START    Command_Type = 4
	Command_DIRECT         Command_Type = 5
	Command_INDIRECT       Command_Type = 6
	Command_KICKOFF        Command_Type = 7
	Command_PENALTY        Command_Type = 8
	Command_TIMEOUT        Command_Type = 9
	Command_BALL_PLACEMENT Command_Type = 10
)

// Enum value maps for Command_Type.
var (
	Command_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "HALT",
		2:  "STOP",
		3:  "NORMAL_START",
		4:  "FORCE_START",
		5:  "DIRECT",
		6:  "INDIRECT",
		7:  "KICKOFF",
		8:  "PENALTY",
		9:  "TIMEOUT",
		10: "BALL_PLACEMENT",
	}
	Command_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"HALT":           1,
		"STOP":           2,
		"NORMAL_START":   3,
		"FORCE_START":    4,
		"DIRECT":         5,
		"INDIRECT":       6,
		"KICKOFF":        7,
		"PENALTY":        8,
		"TIMEOUT":        9,
		"BALL_PLACEMENT": 10,
	}
)

func (x Command_Type) Enum() *Command_Type {
	p := new(Command_Type)
	*p = x
	return p
}

func (x Command_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_state_proto_enumTypes[0].Descriptor()
}

func (Command_Type) Type() protoreflect.EnumType {
	return &file_ssl_gc_state_proto_enumTypes[0]
}

func (x Command_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Command_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Command_Type(num)
	return nil
}

// Deprecated: Use Command_Type.Descriptor instead.
func (Command_Type) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{3, 0}
}

type State_Division int32

const (
	State_DIV_UNKNOWN State_Division = 0
	State_DIV_A       State_Division = 1
	State_DIV_B       State_Division = 2
)

// Enum value maps for State_Division.
var (
	State_Division_name = map[int32]string{
		0: "DIV_UNKNOWN",
		1: "DIV_A",
		2: "DIV_B",
	}
	State_Division_value = map[string]int32{
		"DIV_UNKNOWN": 0,
		"DIV_A":       1,
		"DIV_B":       2,
	}
)

func (x State_Division) Enum() *State_Division {
	p := new(State_Division)
	*p = x
	return p
}

func (x State_Division) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State_Division) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_state_proto_enumTypes[1].Descriptor()
}

func (State_Division) Type() protoreflect.EnumType {
	return &file_ssl_gc_state_proto_enumTypes[1]
}

func (x State_Division) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *State_Division) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = State_Division(num)
	return nil
}

// Deprecated: Use State_Division.Descriptor instead.
func (State_Division) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{5, 0}
}

type State_GameEventBehavior int32

const (
	State_GAME_EVENT_BEHAVIOR_UNKNOWN  State_GameEventBehavior = 0
	State_GAME_EVENT_BEHAVIOR_ON       State_GameEventBehavior = 1
	State_GAME_EVENT_BEHAVIOR_MAJORITY State_GameEventBehavior = 2
	State_GAME_EVENT_BEHAVIOR_OFF      State_GameEventBehavior = 3
)

// Enum value maps for State_GameEventBehavior.
var (
	State_GameEventBehavior_name = map[int32]string{
		0: "GAME_EVENT_BEHAVIOR_UNKNOWN",
		1: "GAME_EVENT_BEHAVIOR_ON",
		2: "GAME_EVENT_BEHAVIOR_MAJORITY",
		3: "GAME_EVENT_BEHAVIOR_OFF",
	}
	State_GameEventBehavior_value = map[string]int32{
		"GAME_EVENT_BEHAVIOR_UNKNOWN":  0,
		"GAME_EVENT_BEHAVIOR_ON":       1,
		"GAME_EVENT_BEHAVIOR_MAJORITY": 2,
		"GAME_EVENT_BEHAVIOR_OFF":      3,
	}
)

func (x State_GameEventBehavior) Enum() *State_GameEventBehavior {
	p := new(State_GameEventBehavior)
	*p = x
	return p
}

func (x State_GameEventBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State_GameEventBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_ssl_gc_state_proto_enumTypes[2].Descriptor()
}

func (State_GameEventBehavior) Type() protoreflect.EnumType {
	return &file_ssl_gc_state_proto_enumTypes[2]
}

func (x State_GameEventBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *State_GameEventBehavior) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = State_GameEventBehavior(num)
	return nil
}

// Deprecated: Use State_GameEventBehavior.Descriptor instead.
func (State_GameEventBehavior) EnumDescriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{5, 1}
}

type YellowCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint32            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CausedByGameEvent *GameEvent         `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
	TimeRemaining     *duration.Duration `protobuf:"bytes,3,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
}

func (x *YellowCard) Reset() {
	*x = YellowCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YellowCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YellowCard) ProtoMessage() {}

func (x *YellowCard) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YellowCard.ProtoReflect.Descriptor instead.
func (*YellowCard) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{0}
}

func (x *YellowCard) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *YellowCard) GetCausedByGameEvent() *GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

func (x *YellowCard) GetTimeRemaining() *duration.Duration {
	if x != nil {
		return x.TimeRemaining
	}
	return nil
}

type RedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CausedByGameEvent *GameEvent `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
}

func (x *RedCard) Reset() {
	*x = RedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedCard) ProtoMessage() {}

func (x *RedCard) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedCard.ProtoReflect.Descriptor instead.
func (*RedCard) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{1}
}

func (x *RedCard) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *RedCard) GetCausedByGameEvent() *GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

type Foul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *uint32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CausedByGameEvent *GameEvent `protobuf:"bytes,2,opt,name=caused_by_game_event,json=causedByGameEvent" json:"caused_by_game_event,omitempty"`
}

func (x *Foul) Reset() {
	*x = Foul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Foul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Foul) ProtoMessage() {}

func (x *Foul) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Foul.ProtoReflect.Descriptor instead.
func (*Foul) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{2}
}

func (x *Foul) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Foul) GetCausedByGameEvent() *GameEvent {
	if x != nil {
		return x.CausedByGameEvent
	}
	return nil
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *Command_Type `protobuf:"varint,1,req,name=type,enum=Command_Type" json:"type,omitempty"`
	ForTeam *Team         `protobuf:"varint,2,opt,name=for_team,json=forTeam,enum=Team" json:"for_team,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{3}
}

func (x *Command) GetType() Command_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Command_UNKNOWN
}

func (x *Command) GetForTeam() Team {
	if x != nil && x.ForTeam != nil {
		return *x.ForTeam
	}
	return Team_UNKNOWN
}

type TeamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                         *string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Goals                        *int32             `protobuf:"varint,2,opt,name=goals" json:"goals,omitempty"`
	Goalkeeper                   *int32             `protobuf:"varint,3,opt,name=goalkeeper" json:"goalkeeper,omitempty"`
	YellowCards                  []*YellowCard      `protobuf:"bytes,4,rep,name=yellow_cards,json=yellowCards" json:"yellow_cards,omitempty"`
	RedCards                     []*RedCard         `protobuf:"bytes,5,rep,name=red_cards,json=redCards" json:"red_cards,omitempty"`
	TimeoutsLeft                 *int32             `protobuf:"varint,6,opt,name=timeouts_left,json=timeoutsLeft" json:"timeouts_left,omitempty"`
	TimeoutTimeLeft              *duration.Duration `protobuf:"bytes,7,opt,name=timeout_time_left,json=timeoutTimeLeft" json:"timeout_time_left,omitempty"`
	OnPositiveHalf               *bool              `protobuf:"varint,8,opt,name=on_positive_half,json=onPositiveHalf" json:"on_positive_half,omitempty"`
	Fouls                        []*Foul            `protobuf:"bytes,9,rep,name=fouls" json:"fouls,omitempty"`
	BallPlacementFailures        *int32             `protobuf:"varint,10,opt,name=ball_placement_failures,json=ballPlacementFailures" json:"ball_placement_failures,omitempty"`
	BallPlacementFailuresReached *bool              `protobuf:"varint,11,opt,name=ball_placement_failures_reached,json=ballPlacementFailuresReached" json:"ball_placement_failures_reached,omitempty"`
	CanPlaceBall                 *bool              `protobuf:"varint,12,opt,name=can_place_ball,json=canPlaceBall" json:"can_place_ball,omitempty"`
	MaxAllowedBots               *int32             `protobuf:"varint,13,opt,name=max_allowed_bots,json=maxAllowedBots" json:"max_allowed_bots,omitempty"`
	BotSubstitutionIntent        *bool              `protobuf:"varint,14,opt,name=bot_substitution_intent,json=botSubstitutionIntent" json:"bot_substitution_intent,omitempty"`
}

func (x *TeamInfo) Reset() {
	*x = TeamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamInfo) ProtoMessage() {}

func (x *TeamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamInfo.ProtoReflect.Descriptor instead.
func (*TeamInfo) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{4}
}

func (x *TeamInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TeamInfo) GetGoals() int32 {
	if x != nil && x.Goals != nil {
		return *x.Goals
	}
	return 0
}

func (x *TeamInfo) GetGoalkeeper() int32 {
	if x != nil && x.Goalkeeper != nil {
		return *x.Goalkeeper
	}
	return 0
}

func (x *TeamInfo) GetYellowCards() []*YellowCard {
	if x != nil {
		return x.YellowCards
	}
	return nil
}

func (x *TeamInfo) GetRedCards() []*RedCard {
	if x != nil {
		return x.RedCards
	}
	return nil
}

func (x *TeamInfo) GetTimeoutsLeft() int32 {
	if x != nil && x.TimeoutsLeft != nil {
		return *x.TimeoutsLeft
	}
	return 0
}

func (x *TeamInfo) GetTimeoutTimeLeft() *duration.Duration {
	if x != nil {
		return x.TimeoutTimeLeft
	}
	return nil
}

func (x *TeamInfo) GetOnPositiveHalf() bool {
	if x != nil && x.OnPositiveHalf != nil {
		return *x.OnPositiveHalf
	}
	return false
}

func (x *TeamInfo) GetFouls() []*Foul {
	if x != nil {
		return x.Fouls
	}
	return nil
}

func (x *TeamInfo) GetBallPlacementFailures() int32 {
	if x != nil && x.BallPlacementFailures != nil {
		return *x.BallPlacementFailures
	}
	return 0
}

func (x *TeamInfo) GetBallPlacementFailuresReached() bool {
	if x != nil && x.BallPlacementFailuresReached != nil {
		return *x.BallPlacementFailuresReached
	}
	return false
}

func (x *TeamInfo) GetCanPlaceBall() bool {
	if x != nil && x.CanPlaceBall != nil {
		return *x.CanPlaceBall
	}
	return false
}

func (x *TeamInfo) GetMaxAllowedBots() int32 {
	if x != nil && x.MaxAllowedBots != nil {
		return *x.MaxAllowedBots
	}
	return 0
}

func (x *TeamInfo) GetBotSubstitutionIntent() bool {
	if x != nil && x.BotSubstitutionIntent != nil {
		return *x.BotSubstitutionIntent
	}
	return false
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage                      *Referee_Stage                     `protobuf:"varint,1,opt,name=stage,enum=Referee_Stage" json:"stage,omitempty"`
	Command                    *Command                           `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	StageTimeElapsed           *duration.Duration                 `protobuf:"bytes,4,opt,name=stage_time_elapsed,json=stageTimeElapsed" json:"stage_time_elapsed,omitempty"`
	StageTimeLeft              *duration.Duration                 `protobuf:"bytes,5,opt,name=stage_time_left,json=stageTimeLeft" json:"stage_time_left,omitempty"`
	MatchTimeStart             *timestamp.Timestamp               `protobuf:"bytes,6,opt,name=match_time_start,json=matchTimeStart" json:"match_time_start,omitempty"`
	TeamState                  map[string]*TeamInfo               `protobuf:"bytes,8,rep,name=team_state,json=teamState" json:"team_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PlacementPos               *geom.Vector2                      `protobuf:"bytes,9,opt,name=placement_pos,json=placementPos" json:"placement_pos,omitempty"`
	NextCommand                *Command                           `protobuf:"bytes,10,opt,name=next_command,json=nextCommand" json:"next_command,omitempty"`
	CurrentActionTimeRemaining *duration.Duration                 `protobuf:"bytes,12,opt,name=current_action_time_remaining,json=currentActionTimeRemaining" json:"current_action_time_remaining,omitempty"`
	GameEvents                 []*GameEvent                       `protobuf:"bytes,13,rep,name=game_events,json=gameEvents" json:"game_events,omitempty"`
	ProposedGameEvents         []*ProposedGameEvent               `protobuf:"bytes,14,rep,name=proposed_game_events,json=proposedGameEvents" json:"proposed_game_events,omitempty"`
	Division                   *State_Division                    `protobuf:"varint,15,opt,name=division,enum=State_Division" json:"division,omitempty"`
	AutoContinue               *bool                              `protobuf:"varint,16,opt,name=auto_continue,json=autoContinue" json:"auto_continue,omitempty"`
	FirstKickoffTeam           *Team                              `protobuf:"varint,17,opt,name=first_kickoff_team,json=firstKickoffTeam,enum=Team" json:"first_kickoff_team,omitempty"`
	GameEventBehavior          map[string]State_GameEventBehavior `protobuf:"bytes,18,rep,name=game_event_behavior,json=gameEventBehavior" json:"game_event_behavior,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=State_GameEventBehavior"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ssl_gc_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_ssl_gc_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_ssl_gc_state_proto_rawDescGZIP(), []int{5}
}

func (x *State) GetStage() Referee_Stage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return Referee_NORMAL_FIRST_HALF_PRE
}

func (x *State) GetCommand() *Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *State) GetStageTimeElapsed() *duration.Duration {
	if x != nil {
		return x.StageTimeElapsed
	}
	return nil
}

func (x *State) GetStageTimeLeft() *duration.Duration {
	if x != nil {
		return x.StageTimeLeft
	}
	return nil
}

func (x *State) GetMatchTimeStart() *timestamp.Timestamp {
	if x != nil {
		return x.MatchTimeStart
	}
	return nil
}

func (x *State) GetTeamState() map[string]*TeamInfo {
	if x != nil {
		return x.TeamState
	}
	return nil
}

func (x *State) GetPlacementPos() *geom.Vector2 {
	if x != nil {
		return x.PlacementPos
	}
	return nil
}

func (x *State) GetNextCommand() *Command {
	if x != nil {
		return x.NextCommand
	}
	return nil
}

func (x *State) GetCurrentActionTimeRemaining() *duration.Duration {
	if x != nil {
		return x.CurrentActionTimeRemaining
	}
	return nil
}

func (x *State) GetGameEvents() []*GameEvent {
	if x != nil {
		return x.GameEvents
	}
	return nil
}

func (x *State) GetProposedGameEvents() []*ProposedGameEvent {
	if x != nil {
		return x.ProposedGameEvents
	}
	return nil
}

func (x *State) GetDivision() State_Division {
	if x != nil && x.Division != nil {
		return *x.Division
	}
	return State_DIV_UNKNOWN
}

func (x *State) GetAutoContinue() bool {
	if x != nil && x.AutoContinue != nil {
		return *x.AutoContinue
	}
	return false
}

func (x *State) GetFirstKickoffTeam() Team {
	if x != nil && x.FirstKickoffTeam != nil {
		return *x.FirstKickoffTeam
	}
	return Team_UNKNOWN
}

func (x *State) GetGameEventBehavior() map[string]State_GameEventBehavior {
	if x != nil {
		return x.GameEventBehavior
	}
	return nil
}

var File_ssl_gc_state_proto protoreflect.FileDescriptor

var file_ssl_gc_state_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x73, 0x6c, 0x5f, 0x67,
	0x63, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x73, 0x73, 0x6c, 0x5f, 0x67, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x73, 0x6c, 0x5f, 0x67,
	0x63, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x56, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x53,
	0x0a, 0x04, 0x46, 0x6f, 0x75, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x11, 0x63, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x54, 0x65, 0x61, 0x6d, 0x22, 0x9f, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41,
	0x4c, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4b,
	0x49, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x41,
	0x4c, 0x54, 0x59, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x22, 0xe5, 0x04, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x52, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x72, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x68, 0x61, 0x6c, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x6c, 0x66, 0x12, 0x1b, 0x0a, 0x05, 0x66, 0x6f,
	0x75, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x46, 0x6f, 0x75, 0x6c,
	0x52, 0x05, 0x66, 0x6f, 0x75, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x1f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x62, 0x61, 0x6c, 0x6c, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x62, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xca,
	0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x44,
	0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x4d,
	0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x1a, 0x47, 0x0a,
	0x0e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x56, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x49, 0x56, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x49, 0x56, 0x5f, 0x42, 0x10, 0x02, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x1b, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48,
	0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x42, 0x3f, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x62, 0x6f, 0x43, 0x75,
	0x70, 0x2d, 0x53, 0x53, 0x4c, 0x2f, 0x73, 0x73, 0x6c, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
}

var (
	file_ssl_gc_state_proto_rawDescOnce sync.Once
	file_ssl_gc_state_proto_rawDescData = file_ssl_gc_state_proto_rawDesc
)

func file_ssl_gc_state_proto_rawDescGZIP() []byte {
	file_ssl_gc_state_proto_rawDescOnce.Do(func() {
		file_ssl_gc_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_ssl_gc_state_proto_rawDescData)
	})
	return file_ssl_gc_state_proto_rawDescData
}

var file_ssl_gc_state_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ssl_gc_state_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ssl_gc_state_proto_goTypes = []interface{}{
	(Command_Type)(0),            // 0: Command.Type
	(State_Division)(0),          // 1: State.Division
	(State_GameEventBehavior)(0), // 2: State.GameEventBehavior
	(*YellowCard)(nil),           // 3: YellowCard
	(*RedCard)(nil),              // 4: RedCard
	(*Foul)(nil),                 // 5: Foul
	(*Command)(nil),              // 6: Command
	(*TeamInfo)(nil),             // 7: TeamInfo
	(*State)(nil),                // 8: State
	nil,                          // 9: State.TeamStateEntry
	nil,                          // 10: State.GameEventBehaviorEntry
	(*GameEvent)(nil),            // 11: GameEvent
	(*duration.Duration)(nil),    // 12: google.protobuf.Duration
	(Team)(0),                    // 13: Team
	(Referee_Stage)(0),           // 14: Referee.Stage
	(*timestamp.Timestamp)(nil),  // 15: google.protobuf.Timestamp
	(*geom.Vector2)(nil),         // 16: Vector2
	(*ProposedGameEvent)(nil),    // 17: ProposedGameEvent
}
var file_ssl_gc_state_proto_depIdxs = []int32{
	11, // 0: YellowCard.caused_by_game_event:type_name -> GameEvent
	12, // 1: YellowCard.time_remaining:type_name -> google.protobuf.Duration
	11, // 2: RedCard.caused_by_game_event:type_name -> GameEvent
	11, // 3: Foul.caused_by_game_event:type_name -> GameEvent
	0,  // 4: Command.type:type_name -> Command.Type
	13, // 5: Command.for_team:type_name -> Team
	3,  // 6: TeamInfo.yellow_cards:type_name -> YellowCard
	4,  // 7: TeamInfo.red_cards:type_name -> RedCard
	12, // 8: TeamInfo.timeout_time_left:type_name -> google.protobuf.Duration
	5,  // 9: TeamInfo.fouls:type_name -> Foul
	14, // 10: State.stage:type_name -> Referee.Stage
	6,  // 11: State.command:type_name -> Command
	12, // 12: State.stage_time_elapsed:type_name -> google.protobuf.Duration
	12, // 13: State.stage_time_left:type_name -> google.protobuf.Duration
	15, // 14: State.match_time_start:type_name -> google.protobuf.Timestamp
	9,  // 15: State.team_state:type_name -> State.TeamStateEntry
	16, // 16: State.placement_pos:type_name -> Vector2
	6,  // 17: State.next_command:type_name -> Command
	12, // 18: State.current_action_time_remaining:type_name -> google.protobuf.Duration
	11, // 19: State.game_events:type_name -> GameEvent
	17, // 20: State.proposed_game_events:type_name -> ProposedGameEvent
	1,  // 21: State.division:type_name -> State.Division
	13, // 22: State.first_kickoff_team:type_name -> Team
	10, // 23: State.game_event_behavior:type_name -> State.GameEventBehaviorEntry
	7,  // 24: State.TeamStateEntry.value:type_name -> TeamInfo
	2,  // 25: State.GameEventBehaviorEntry.value:type_name -> State.GameEventBehavior
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_ssl_gc_state_proto_init() }
func file_ssl_gc_state_proto_init() {
	if File_ssl_gc_state_proto != nil {
		return
	}
	file_ssl_gc_common_proto_init()
	file_ssl_gc_game_event_proto_init()
	file_ssl_gc_referee_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ssl_gc_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YellowCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Foul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ssl_gc_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ssl_gc_state_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ssl_gc_state_proto_goTypes,
		DependencyIndexes: file_ssl_gc_state_proto_depIdxs,
		EnumInfos:         file_ssl_gc_state_proto_enumTypes,
		MessageInfos:      file_ssl_gc_state_proto_msgTypes,
	}.Build()
	File_ssl_gc_state_proto = out.File
	file_ssl_gc_state_proto_rawDesc = nil
	file_ssl_gc_state_proto_goTypes = nil
	file_ssl_gc_state_proto_depIdxs = nil
}
